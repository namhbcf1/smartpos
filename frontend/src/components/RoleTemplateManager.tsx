import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActions,
  Chip,
  IconButton,
  Tooltip,
  Alert,
  CircularProgress,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  TextField,
  FormControlLabel,
  Switch
} from '@mui/material';
import {
  AdminPanelSettings as AdminIcon,
  Business as ManagerIcon,
  PointOfSale as CashierIcon,
  TrendingUp as SalesIcon,
  Inventory as InventoryIcon,
  Group as AffiliateIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Add as AddIcon,
  Save as SaveIcon,
  Close as CloseIcon,
  Security as SecurityIcon,
  CheckCircle as CheckIcon
} from '@mui/icons-material';
import { useSnackbar } from 'notistack';
import apiClient from '../services/api';

interface RoleTemplate {
  id: number;
  name: string;
  display_name: string;
  description: string;
  is_template: boolean;
  is_system: boolean;
  permission_count: number;
}

interface RoleTemplateManagerProps {
  open: boolean;
  onClose: () => void;
  onRoleTemplateCreated?: () => void;
}

const RoleTemplateManager: React.FC<RoleTemplateManagerProps> = ({
  open,
  onClose,
  onRoleTemplateCreated
}) => {
  const [loading, setLoading] = useState(false);
  const [roleTemplates, setRoleTemplates] = useState<RoleTemplate[]>([]);
  const [editingTemplate, setEditingTemplate] = useState<RoleTemplate | null>(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    display_name: '',
    description: '',
    is_template: true
  });
  const { enqueueSnackbar } = useSnackbar();

  useEffect(() => {
    if (open) {
      loadRoleTemplates();
    }
  }, [open]);

  const loadRoleTemplates = async () => {
    setLoading(true);
    try {
      const response = await apiClient.get('/permissions/roles/templates');
      setRoleTemplates(response.data);
    } catch (error) {
      console.error('Error loading role templates:', error);
      enqueueSnackbar('L·ªói khi t·∫£i danh s√°ch vai tr√≤', { variant: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const getRoleIcon = (roleName: string) => {
    if (roleName.includes('admin')) return <AdminIcon />;
    if (roleName.includes('manager')) return <ManagerIcon />;
    if (roleName.includes('cashier')) return <CashierIcon />;
    if (roleName.includes('sales')) return <SalesIcon />;
    if (roleName.includes('inventory')) return <InventoryIcon />;
    if (roleName.includes('affiliate')) return <AffiliateIcon />;
    return <SecurityIcon />;
  };

  const getRoleColor = (roleName: string) => {
    if (roleName.includes('admin')) return 'error';
    if (roleName.includes('manager')) return 'warning';
    if (roleName.includes('cashier')) return 'primary';
    if (roleName.includes('sales')) return 'success';
    if (roleName.includes('inventory')) return 'info';
    if (roleName.includes('affiliate')) return 'secondary';
    return 'default';
  };

  const handleCreateTemplate = async () => {
    try {
      setLoading(true);
      
      if (!formData.name || !formData.display_name) {
        enqueueSnackbar('Vui l√≤ng nh·∫≠p t√™n v√† t√™n hi·ªÉn th·ªã', { variant: 'error' });
        return;
      }

      const response = await apiClient.post('/permissions/roles/templates', formData);
      
      if (response.success) {
        enqueueSnackbar('T·∫°o vai tr√≤ m·∫´u th√†nh c√¥ng', { variant: 'success' });
        setShowCreateForm(false);
        setFormData({ name: '', display_name: '', description: '', is_template: true });
        await loadRoleTemplates();
        onRoleTemplateCreated?.();
      }
    } catch (error) {
      console.error('Error creating role template:', error);
      enqueueSnackbar('L·ªói khi t·∫°o vai tr√≤ m·∫´u', { variant: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteTemplate = async (templateId: number) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a vai tr√≤ m·∫´u n√†y?')) {
      return;
    }

    try {
      setLoading(true);
      const response = await apiClient.delete(`/permissions/roles/templates/${templateId}`);
      
      if (response.success) {
        enqueueSnackbar('X√≥a vai tr√≤ m·∫´u th√†nh c√¥ng', { variant: 'success' });
        await loadRoleTemplates();
        onRoleTemplateCreated?.();
      }
    } catch (error) {
      console.error('Error deleting role template:', error);
      enqueueSnackbar('L·ªói khi x√≥a vai tr√≤ m·∫´u', { variant: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const systemTemplates = roleTemplates.filter(t => t.is_system);
  const customTemplates = roleTemplates.filter(t => !t.is_system);

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="lg"
      fullWidth
      PaperProps={{
        sx: { height: '80vh' }
      }}
    >
      <DialogTitle>
        <Box display="flex" alignItems="center" justifyContent="space-between">
          <Box display="flex" alignItems="center" gap={2}>
            <SecurityIcon color="primary" />
            <Typography variant="h6">
              Qu·∫£n l√Ω vai tr√≤ m·∫´u
            </Typography>
          </Box>
          <Box>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => setShowCreateForm(true)}
              sx={{ mr: 1 }}
            >
              T·∫°o vai tr√≤ m·ªõi
            </Button>
            <IconButton onClick={onClose}>
              <CloseIcon />
            </IconButton>
          </Box>
        </Box>
      </DialogTitle>

      <DialogContent dividers>
        {loading ? (
          <Box display="flex" justifyContent="center" alignItems="center" minHeight={400}>
            <CircularProgress />
          </Box>
        ) : (
          <>
            {showCreateForm && (
              <Card sx={{ mb: 3, border: '2px dashed', borderColor: 'primary.main' }}>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    T·∫°o vai tr√≤ m·∫´u m·ªõi
                  </Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="T√™n vai tr√≤ (ti·∫øng Anh)"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        placeholder="e.g., custom_manager"
                      />
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="T√™n hi·ªÉn th·ªã"
                        value={formData.display_name}
                        onChange={(e) => setFormData({ ...formData, display_name: e.target.value })}
                        placeholder="e.g., Qu·∫£n l√Ω t√πy ch·ªânh"
                      />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField
                        fullWidth
                        multiline
                        rows={2}
                        label="M√¥ t·∫£"
                        value={formData.description}
                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                        placeholder="M√¥ t·∫£ vai tr√≤ v√† quy·ªÅn h·∫°n..."
                      />
                    </Grid>
                  </Grid>
                </CardContent>
                <CardActions>
                  <Button
                    variant="contained"
                    startIcon={<SaveIcon />}
                    onClick={handleCreateTemplate}
                    disabled={loading}
                  >
                    T·∫°o vai tr√≤
                  </Button>
                  <Button onClick={() => setShowCreateForm(false)}>
                    H·ªßy
                  </Button>
                </CardActions>
              </Card>
            )}

            {/* System Role Templates */}
            <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
              üèõÔ∏è Vai tr√≤ h·ªá th·ªëng
            </Typography>
            <Alert severity="info" sx={{ mb: 2 }}>
              C√°c vai tr√≤ h·ªá th·ªëng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn v√† kh√¥ng th·ªÉ ch·ªânh s·ª≠a ho·∫∑c x√≥a.
            </Alert>
            <Grid container spacing={2}>
              {systemTemplates.map((template) => (
                <Grid item xs={12} sm={6} md={4} key={template.id}>
                  <Card sx={{ height: '100%' }}>
                    <CardContent>
                      <Box display="flex" alignItems="center" gap={2} mb={2}>
                        {getRoleIcon(template.name)}
                        <Typography variant="h6">
                          {template.display_name}
                        </Typography>
                      </Box>
                      <Typography variant="body2" color="text.secondary" gutterBottom>
                        {template.description}
                      </Typography>
                      <Box display="flex" gap={1} mt={2}>
                        <Chip
                          label={`${template.permission_count} quy·ªÅn`}
                          size="small"
                          color={getRoleColor(template.name) as any}
                        />
                        <Chip
                          label="H·ªá th·ªëng"
                          size="small"
                          color="default"
                        />
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>

            {/* Custom Role Templates */}
            <Typography variant="h6" gutterBottom sx={{ mt: 4 }}>
              üé® Vai tr√≤ t√πy ch·ªânh
            </Typography>
            {customTemplates.length === 0 ? (
              <Alert severity="info">
                Ch∆∞a c√≥ vai tr√≤ t√πy ch·ªânh n√†o. Nh·∫•n "T·∫°o vai tr√≤ m·ªõi" ƒë·ªÉ t·∫°o vai tr√≤ t√πy ch·ªânh.
              </Alert>
            ) : (
              <Grid container spacing={2}>
                {customTemplates.map((template) => (
                  <Grid item xs={12} sm={6} md={4} key={template.id}>
                    <Card sx={{ height: '100%' }}>
                      <CardContent>
                        <Box display="flex" alignItems="center" gap={2} mb={2}>
                          {getRoleIcon(template.name)}
                          <Typography variant="h6">
                            {template.display_name}
                          </Typography>
                        </Box>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          {template.description}
                        </Typography>
                        <Box display="flex" gap={1} mt={2}>
                          <Chip
                            label={`${template.permission_count} quy·ªÅn`}
                            size="small"
                            color={getRoleColor(template.name) as any}
                          />
                          <Chip
                            label="T√πy ch·ªânh"
                            size="small"
                            color="primary"
                          />
                        </Box>
                      </CardContent>
                      <CardActions>
                        <Tooltip title="Ch·ªânh s·ª≠a vai tr√≤">
                          <IconButton
                            size="small"
                            onClick={() => setEditingTemplate(template)}
                            color="primary"
                          >
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="X√≥a vai tr√≤">
                          <IconButton
                            size="small"
                            onClick={() => handleDeleteTemplate(template.id)}
                            color="error"
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </CardActions>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            )}
          </>
        )}
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose}>
          ƒê√≥ng
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default RoleTemplateManager;
