import React from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Grid, Zap, Package, Layers, Package2, Receipt, FileText, PieChart, Users, Settings as Cog, Shield, Building2, UserCheck, Truck, Store, Clock, CheckCircle, CreditCard, DollarSign, MessageSquare, Monitor, MapPin, CheckSquare, ShoppingCart, RotateCcw } from 'lucide-react'
import { cn } from '../../lib/utils'
import { useLocation, useNavigate } from 'react-router-dom'
import { usePermissions } from '../../hooks/usePermissions'

interface SidebarProps {
  isOpen: boolean
  isCollapsed?: boolean
  onToggle: () => void
  onCollapse?: () => void
  isMobile?: boolean
}

interface NavItem {
  id: string
  label: string
  icon: React.ReactNode
  href: string
  badge?: string
  badgeColor?: 'blue' | 'green' | 'red' | 'yellow' | 'purple' | 'pink' | 'orange'
  gradient?: string
  children?: NavItem[]
  isNew?: boolean
  isPro?: boolean
  permissions?: string[]
  requireAll?: boolean
}

const navigationItems: NavItem[] = [
  { id: 'overview', label: 'T·ªïng quan', icon: <Grid className="w-4 h-4" />, href: '/dashboard' },
  { id: 'pos', label: 'POS', icon: <Zap className="w-4 h-4" />, href: '/pos', permissions: ['pos.access','sales.create'] },

  // Warranty Management - Moved to top for visibility
  { id: 'warranty-list', label: 'B·∫£o h√†nh', icon: <Shield className="w-4 h-4" />, href: '/warranty', badge: 'BH', badgeColor: 'blue' },
  { id: 'warranty-claims', label: 'Khi·∫øu n·∫°i BH', icon: <FileText className="w-4 h-4" />, href: '/warranty/claims', badge: 'KN', badgeColor: 'red' },
  { id: 'service-centers', label: 'Trung t√¢m BH', icon: <Building2 className="w-4 h-4" />, href: '/warranty/service-centers', badge: 'TT', badgeColor: 'green' },
  { id: 'warranty-qr', label: 'QR tra c·ª©u', icon: <Package className="w-4 h-4" />, href: '/warranty/qr-lookup', badge: 'QR', badgeColor: 'purple' },
  { id: 'warranty-notifications', label: 'Th√¥ng b√°o BH', icon: <Users className="w-4 h-4" />, href: '/warranty/notifications', badge: 'TB', badgeColor: 'orange' },
  { id: 'warranty-history', label: 'L·ªãch s·ª≠ BH', icon: <Receipt className="w-4 h-4" />, href: '/warranty/history', badge: 'LS', badgeColor: 'pink' },

  // Core Business
  { id: 'products-list', label: 'S·∫£n ph·∫©m', icon: <Package className="w-4 h-4" />, href: '/products/list', permissions: ['products.read'] },
  { id: 'products-categories', label: 'Danh m·ª•c', icon: <Grid className="w-4 h-4" />, href: '/products/categories', permissions: ['categories.read','products.manage'] },
  { id: 'products-inventory', label: 'T·ªìn kho', icon: <Package2 className="w-4 h-4" />, href: '/inventory', permissions: ['inventory.read','inventory.view'] },
  { id: 'inventory-locations', label: 'V·ªã tr√≠ kho', icon: <Package className="w-4 h-4" />, href: '/inventory/locations', permissions: ['inventory.read','inventory.view'] },
  { id: 'inventory-batches', label: 'Batch/Lot', icon: <Layers className="w-4 h-4" />, href: '/inventory/batches', permissions: ['inventory.read','inventory.view'] },
  { id: 'inventory-alerts', label: 'C·∫£nh b√°o kho', icon: <Shield className="w-4 h-4" />, href: '/inventory/alerts', permissions: ['inventory.read','inventory.view'] },
  { id: 'inventory-reorder', label: 'ƒê·ªÅ xu·∫•t ƒë·∫∑t h√†ng', icon: <Clock className="w-4 h-4" />, href: '/inventory/reorder', permissions: ['inventory.read','inventory.view'] },
  { id: 'sales-history', label: 'B√°n h√†ng', icon: <Receipt className="w-4 h-4" />, href: '/sales/history', permissions: ['sales.read','sales.view'] },
  { id: 'orders-list', label: 'ƒê∆°n h√†ng', icon: <FileText className="w-4 h-4" />, href: '/orders', permissions: ['orders.read', 'orders.view'] },
  { id: 'orders-new', label: 'ƒê∆°n m·ªõi', icon: <Clock className="w-4 h-4" />, href: '/orders/new', permissions: ['orders.read', 'orders.process'], badge: 'New', badgeColor: 'blue' },
  { id: 'orders-shipping', label: 'ƒêang giao', icon: <Truck className="w-4 h-4" />, href: '/orders/shipping', permissions: ['orders.read', 'orders.ship'], badge: 'Ship', badgeColor: 'orange' },
  { id: 'orders-completed', label: 'Ho√†n t·∫•t', icon: <CheckCircle className="w-4 h-4" />, href: '/orders/completed', permissions: ['orders.read', 'orders.view'] },
  { id: 'reports-basic', label: 'B√°o c√°o', icon: <PieChart className="w-4 h-4" />, href: '/reports/basic', permissions: ['reports.read'] },
  { id: 'customers', label: 'Kh√°ch h√†ng', icon: <UserCheck className="w-4 h-4" />, href: '/customers', permissions: ['customers.read', 'customers.view'], badge: 'KH', badgeColor: 'blue' },
  { id: 'suppliers', label: 'Nh√† cung c·∫•p', icon: <Building2 className="w-4 h-4" />, href: '/suppliers', permissions: ['suppliers.read'], badge: 'NCC', badgeColor: 'green' },
  { id: 'distributors', label: 'Nh√† ph√¢n ph·ªëi', icon: <Truck className="w-4 h-4" />, href: '/distributors', permissions: ['distributors.read'], badge: 'NPP', badgeColor: 'purple' },
  { id: 'agents', label: 'ƒê·∫°i l√Ω', icon: <Store className="w-4 h-4" />, href: '/agents', permissions: ['agents.read'], badge: 'ƒêL', badgeColor: 'orange' },
  { id: 'payments', label: 'Thanh to√°n', icon: <CreditCard className="w-4 h-4" />, href: '/payments', permissions: ['payments.read'], badge: 'TT', badgeColor: 'green' },
  { id: 'customer-debts', label: 'C√¥ng n·ª£ KH', icon: <DollarSign className="w-4 h-4" />, href: '/debts/customers', permissions: ['debts.read'], badge: 'N·ª£', badgeColor: 'red' },
  { id: 'supplier-debts', label: 'C√¥ng n·ª£ NCC', icon: <DollarSign className="w-4 h-4" />, href: '/debts/suppliers', permissions: ['debts.read'], badge: 'N·ª£', badgeColor: 'orange' },
  { id: 'invoices', label: 'H√≥a ƒë∆°n', icon: <FileText className="w-4 h-4" />, href: '/invoices', permissions: ['invoices.read'], badge: 'HD', badgeColor: 'blue' },
  { id: 'support-tickets', label: 'Ticket h·ªó tr·ª£', icon: <MessageSquare className="w-4 h-4" />, href: '/support/tickets', permissions: ['support.read'], badge: 'TK', badgeColor: 'purple' },
  { id: 'devices', label: 'Thi·∫øt b·ªã', icon: <Monitor className="w-4 h-4" />, href: '/devices', permissions: ['devices.read'], badge: 'TB', badgeColor: 'blue' },
  { id: 'branches', label: 'Chi nh√°nh', icon: <MapPin className="w-4 h-4" />, href: '/branches', permissions: ['branches.read'], badge: 'CN', badgeColor: 'green' },
  { id: 'purchase-orders', label: 'ƒê∆°n mua', icon: <ShoppingCart className="w-4 h-4" />, href: '/purchases/orders', permissions: ['purchases.read'], badge: 'ƒêM', badgeColor: 'blue' },
  { id: 'purchase-receipts', label: 'Nh·∫≠n h√†ng', icon: <Package className="w-4 h-4" />, href: '/purchases/receipts', permissions: ['purchases.read'], badge: 'NH', badgeColor: 'green' },
  { id: 'purchase-returns', label: 'Tr·∫£ h√†ng NCC', icon: <RotateCcw className="w-4 h-4" />, href: '/purchases/returns', permissions: ['purchases.read'], badge: 'TH', badgeColor: 'orange' },
  { id: 'employees', label: 'Nh√¢n vi√™n', icon: <Users className="w-4 h-4" />, href: '/employees', permissions: ['employees.read'], badge: 'NV', badgeColor: 'blue' },
  { id: 'roles', label: 'Ph√¢n quy·ªÅn', icon: <Shield className="w-4 h-4" />, href: '/roles', permissions: ['roles.read'], badge: 'PQ', badgeColor: 'purple' },
  { id: 'tasks-list', label: 'C√¥ng vi·ªác', icon: <CheckSquare className="w-4 h-4" />, href: '/tasks', permissions: ['tasks.read', 'tasks.view'] },
  { id: 'settings', label: 'C√†i ƒë·∫∑t', icon: <Cog className="w-4 h-4" />, href: '/settings' }
]

const NavItemComponent: React.FC<{
  item: NavItem
  isCollapsed: boolean
}> = ({ item, isCollapsed }) => {
  const location = useLocation()
  const navigate = useNavigate()
  const { hasAnyPermission } = usePermissions()
  
  const isActive = location.pathname === item.href

  // Check permissions
  const hasPermission = !item.permissions || hasAnyPermission(item.permissions)

  const handleClick = () => {
    console.log('üîó Navigating to:', item.href)
    navigate(item.href)
  }

  // Don't render if user doesn't have permission
  if (!hasPermission) {
    return null
  }

  const getBadgeColors = (color: string = 'blue') => {
    const colors = {
      blue: 'bg-blue-100 text-blue-800  
      green: 'bg-green-100 text-green-800  
      red: 'bg-red-100 text-red-800  
      yellow: 'bg-yellow-100 text-yellow-800  
      purple: 'bg-purple-100 text-purple-800  
      pink: 'bg-pink-100 text-pink-800  
      orange: 'bg-orange-100 text-orange-800  
    }
    return colors[color as keyof typeof colors] || colors.blue
  }

  return (
    <motion.button
      className={cn(
        "relative flex items-center w-full px-3 py-2.5 text-sm font-medium rounded-xl transition-all duration-300 group cursor-pointer overflow-hidden",
        "hover:shadow-md hover:shadow-blue-500/10",
        "focus:outline-none focus:ring-2 focus:ring-blue-500/30",
        "border border-transparent",
        isActive
          ? "bg-gradient-to-r from-blue-600 to-blue-700 text-white shadow-lg shadow-blue-500/25 border-blue-500/20"
          : "text-slate-700  hover:bg-gradient-to-r hover:from-slate-50 hover:to-blue-50   hover:border-blue-200/30 
      )}
      whileHover={{ x: 2 }}
      whileTap={{ scale: 0.98 }}
      onClick={handleClick}
      aria-label={`${item.label}`}
      aria-current={isActive ? 'page' : undefined}
      role={'menuitem'}
      tabIndex={0}
    >
      {/* Active state background with shimmer effect */}
      {isActive && (
        <>
          <motion.div
            layoutId="activeBackground"
            className="absolute inset-0 bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl">
            initial={false}
            transition={{ type: "spring", stiffness: 500, damping: 30 }}
          />
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent rounded-xl">
            initial={{ x: '-100%' }}
            animate={{ x: '100%' }}
            transition={{
              duration: 2,
              repeat: Infinity,
              repeatType: 'loop',
              ease: 'linear'
            }}
          />
        </>
      )}

      {/* Content container */}
      <div className="relative flex items-center space-x-2.5 flex-1 z-10">
        {/* Icon with modern styling */}
        <div className={cn(
          "flex-shrink-0 transition-all duration-300 transform group-hover:scale-110",
          "flex items-center justify-center w-8 h-8 rounded-lg",
          isActive
            ? "text-white bg-white/10"
            : "text-slate-500  group-hover:text-blue-600  group-hover:bg-blue-100/50 
        )}>
          {item.icon}
        </div>

        {/* Label and badges */}
        <AnimatePresence>
          {!isCollapsed && (
            <motion.div
              initial={{ opacity: 0, width: 0 }}
              animate={{ opacity: 1, width: 'auto' }}
              exit={{ opacity: 0, width: 0 }}
              className="flex items-center justify-between flex-1 min-w-0">
            >
              <span className={cn(
                "truncate font-medium transition-colors text-sm",
                isActive ? "text-white" : "text-slate-700 
              )}>
                {item.label}
              </span>

              {/* Enhanced badges */}
              {item.badge && (
                <motion.span
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  whileHover={{ scale: 1.05 }}
                  className={cn(
                    "px-2 py-1 text-xs font-semibold rounded-full shadow-sm",
                    "border backdrop-blur-sm",
                    isActive
                      ? "bg-white/20 text-white border-white/20 shadow-white/10"
                      : cn(getBadgeColors(item.badgeColor), "border-current/10")
                  )}
                >
                  {item.badge}
                </motion.span>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.button>
  )
}

export const Sidebar: React.FC<SidebarProps> = ({ 
  isOpen, 
  isCollapsed = false, 
  onToggle, 
  onCollapse,
  isMobile = false 
}) => {
  const { hasAnyPermission } = usePermissions()
  
  // Filter navigation items based on permissions
  const visibleNavigationItems = navigationItems.filter(item => 
    !item.permissions || hasAnyPermission(item.permissions)
  )

  return (
    <>
      {/* Mobile Overlay */}
      <AnimatePresence>
        {isOpen && isMobile && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-40 bg-black/60 backdrop-blur-sm lg:hidden" onClick={onToggle}
          />
        )}
      </AnimatePresence>

      {/* Ultra-Modern Sidebar */}
      <motion.aside
        initial={false}
        animate={{
          x: isOpen ? 0 : -320,
          width: isCollapsed ? 80 : 300
        }}
        transition={{ type: "spring", stiffness: 300, damping: 30 }}
        className={cn(
          "fixed left-0 top-0 z-50 h-screen",
          "bg-white/95  backdrop-blur-xl",
          "border-r border-slate-200/50 
          "shadow-2xl shadow-slate-900/10 
          "lg:relative lg:translate-x-0 flex flex-col",
          "before:absolute before:inset-0 before:bg-gradient-to-b before:from-blue-50/30 before:to-transparent  before:pointer-events-none"
        )}
      >
        {/* Modern Header */}
        <div className="p-5 border-b border-slate-200/50 bg-gradient-to-r from-transparent to-blue-50/20">
          <div className="flex items-center justify-between">
            <AnimatePresence>
              {!isCollapsed && (
                <motion.div
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -10 }}
                  className="flex items-center space-x-3">
                >
                  <div className="relative w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl flex items-center justify-center shadow-lg shadow-blue-500/25">
                    <Grid className="w-5 h-5 text-white" />
                    <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-xl" />
                  </div>
                  <div>
                    <h1 className="text-xl font-bold text-slate-900  bg-gradient-to-r from-slate-900 to-blue-700  bg-clip-text text-transparent">
                      Smart POS
                    </h1>
                    <p className="text-xs text-slate-500 font-medium">Management System</p>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>

            {/* Enhanced Collapse Button */}
            {!isMobile && (
              <motion.button
                onClick={onCollapse}
                className="hidden lg:flex items-center justify-center w-9 h-9 rounded-xl bg-slate-100/50  hover:bg-slate-200  transition-all duration-300 border border-slate-200/50 shadow-sm">
                whileHover={{ scale: 1.05, rotate: 90 }}
                whileTap={{ scale: 0.95 }}
              >
                <Grid className="w-4 h-4 text-slate-600" />
              </motion.button>
            )}

            <motion.button
              onClick={onToggle}
              className="lg:hidden flex items-center justify-center w-8 h-8 rounded-lg hover:bg-slate-100 transition-colors">
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Grid className="w-4 h-4 text-slate-600" />
            </motion.button>
          </div>
        </div>

        {/* Enhanced Navigation */}
        <nav
          className="flex-1 p-4 overflow-y-auto scrollbar-thin scrollbar-thumb-slate-300/50  scrollbar-track-transparent hover:scrollbar-thumb-slate-400/70 min-h-0">
          role="navigation"
          aria-label="Menu ch√≠nh"
        >
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ staggerChildren: 0.01, delayChildren: 0.1 }}
            className="space-y-1.5">
          >
            {visibleNavigationItems.map((item, index) => (
              <motion.div
                key={item.id}
                initial={{ opacity: 0, x: -10 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.03 }}
              >
                <NavItemComponent
                  item={item}
                  isCollapsed={isCollapsed}
                />
              </motion.div>
            ))}
          </motion.div>
        </nav>

        {/* Enhanced Footer */}
        <AnimatePresence>
          {!isCollapsed && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              className="p-4 border-t border-slate-200/50 bg-gradient-to-r from-transparent to-slate-50/30">
            >
              <div className="flex items-center justify-between text-xs text-slate-500">
                <span className="font-medium">¬© 2024 Smart POS</span>
                <motion.div
                  className="flex items-center space-x-2 px-2 py-1 bg-green-50 rounded-full border border-green-200/50">
                  animate={{ opacity: [0.7, 1, 0.7] }}
                  transition={{ duration: 2, repeat: Infinity }}
                >
                  <div className="w-1.5 h-1.5 bg-green-400 rounded-full shadow-sm shadow-green-400/50" />
                  <span className="font-medium text-green-600">Online</span>
                </motion.div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.aside>
    </>
  )
}
