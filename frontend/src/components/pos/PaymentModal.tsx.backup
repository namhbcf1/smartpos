import React, { useState, useEffect } from 'react';
import { X, CreditCard, DollarSign, Smartphone, Calculator } from 'lucide-react';
import { formatCurrency } from '../../lib/utils';
import toast from 'react-hot-toast';

interface PaymentMethod {
  id: string;
  name: string;
  icon: string;
  description: string;
}

interface PaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  total: number;
  onPayment: (method: PaymentMethod, amount: number) => void;
  isProcessing: boolean;
}

const paymentMethods: PaymentMethod[] = [
  { id: 'cash', name: 'Ti·ªÅn m·∫∑t', icon: 'üí∞', description: 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t' },
  { id: 'card', name: 'Th·∫ª ng√¢n h√†ng', icon: 'üí≥', description: 'Thanh to√°n b·∫±ng th·∫ª' },
  { id: 'momo', name: 'V√≠ MoMo', icon: 'üì±', description: 'Thanh to√°n qua MoMo' },
  { id: 'zalopay', name: 'ZaloPay', icon: 'üíô', description: 'Thanh to√°n qua ZaloPay' },
  { id: 'transfer', name: 'Chuy·ªÉn kho·∫£n', icon: 'üè¶', description: 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng' }
];

export default function PaymentModal({ isOpen, onClose, total, onPayment, isProcessing }: PaymentModalProps) {
  const [selectedMethod, setSelectedMethod] = useState<PaymentMethod | null>(null);
  const [amount, setAmount] = useState(total);
  const [showCalculator, setShowCalculator] = useState(false);

  useEffect(() => {
    setAmount(total);
  }, [total]);

  if (!isOpen) return null;

  const handlePayment = () => {
    if (!selectedMethod) {
      toast.error('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n');
      return;
    }

    if (amount < total) {
      toast.error('S·ªë ti·ªÅn thanh to√°n kh√¥ng ƒë·ªß');
      return;
    }

    onPayment(selectedMethod, amount);
  };

  const quickAmounts = [
    { label: 'ƒê√∫ng s·ªë', value: total },
    { label: '100k', value: 100000 },
    { label: '200k', value: 200000 },
    { label: '500k', value: 500000 },
    { label: '1tr', value: 1000000 }
  ];

  const change = Math.max(0, amount - total);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto text-gray-900">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-xl font-semibold text-gray-900">Thanh to√°n</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 ">
            disabled={isProcessing}
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Order Summary */}
        <div className="bg-gray-50 rounded-lg p-4 mb-6">
          <div className="flex justify-between items-center">
            <span className="text-gray-600">T·ªïng thanh to√°n:</span>
            <span className="text-2xl font-bold text-green-600">
              {formatCurrency(total)}
            </span>
          </div>
        </div>

        {/* Payment Methods */}
        <div className="mb-6">
          <h4 className="text-lg font-medium text-gray-900 mb-3">Ph∆∞∆°ng th·ª©c thanh to√°n</h4>
          <div className="grid grid-cols-1 gap-3">
            {paymentMethods.map((method) => (
              <button
                key={method.id}
                onClick={() => setSelectedMethod(method)}
                disabled={isProcessing}
                className={`p-4 rounded-lg border-2 text-left transition-colors ${
                  selectedMethod?.id === method.id
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
              >
                <div className="flex items-center space-x-3">
                  <span className="text-2xl">{method.icon}</span>
                  <div>
                    <div className="font-medium text-gray-900">{method.name}</div>
                    <div className="text-sm text-gray-500">{method.description}</div>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Amount Input */}
        <div className="mb-6">
          <div className="flex justify-between items-center mb-2">
            <label className="text-lg font-medium text-gray-900">S·ªë ti·ªÅn thanh to√°n</label>
            <button
              onClick={() => setShowCalculator(!showCalculator)}
              className="text-blue-600 hover:text-blue-800">
            >
              <Calculator className="w-5 h-5" />
            </button>
          </div>
          
            <input
              type="number"
              value={amount}
              onChange={(e) => setAmount(Number(e.target.value))}
              className="w-full px-4 py-3 border border-gray-300  rounded-lg text-xl font-medium text-center focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900">
            disabled={isProcessing}
          />

          {/* Quick Amount Buttons */}
          <div className="grid grid-cols-5 gap-2 mt-3">
            {quickAmounts.map((quick) => (
              <button
                key={quick.label}
                onClick={() => setAmount(quick.value)}
                disabled={isProcessing}
                className="px-3 py-2 bg-gray-100  hover:bg-gray-200 rounded-lg text-sm font-medium transition-colors text-gray-900">
              >
                {quick.label}
              </button>
            ))}
          </div>

          {/* Change Display */}
          {change > 0 && (
            <div className="mt-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
              <div className="flex justify-between items-center">
                <span className="text-yellow-800 font-medium">Ti·ªÅn th·ª´a:</span>
                <span className="text-yellow-900 font-bold text-lg">{formatCurrency(change)}</span>
              </div>
            </div>
          )}

          {/* Insufficient Amount Warning */}
          {amount < total && (
            <div className="mt-3 p-3 bg-red-50 rounded-lg border border-red-200">
              <span className="text-red-800 font-medium">
                Thi·∫øu: {formatCurrency(total - amount)}
              </span>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex space-x-3">
          <button
            onClick={onClose}
            disabled={isProcessing}
            className="flex-1 px-6 py-3 border border-gray-300  rounded-lg font-medium text-gray-700  hover:bg-gray-50 disabled:opacity-50">
          >
            H·ªßy
          </button>
          <button
            onClick={handlePayment}
            disabled={!selectedMethod || amount < total || isProcessing}
            className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2">
          >
            {isProcessing ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                <span>ƒêang x·ª≠ l√Ω...</span>
              </>
            ) : (
              <>
                <CreditCard className="w-5 h-5" />
                <span>Thanh to√°n</span>
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}
