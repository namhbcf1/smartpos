import React, { useRef, useEffect, useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Stack,
  Alert,
  Typography,
  IconButton,
  CircularProgress,
} from '@mui/material';
import {
  Close,
  CameraAlt,
  Refresh,
  CheckCircle,
} from '@mui/icons-material';

interface CameraOCRDialogProps {
  open: boolean;
  onClose: () => void;
  onCapture: (imageData: string) => void;
  isProcessing?: boolean;
}

export default function CameraOCRDialog({
  open,
  onClose,
  onCapture,
  isProcessing = false
}: CameraOCRDialogProps) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [streaming, setStreaming] = useState(false);
  const [error, setError] = useState<string>('');
  const [capturedImage, setCapturedImage] = useState<string>('');
  const [hasCamera, setHasCamera] = useState(true);

  const startCamera = async () => {
    try {
      setError('');
      setHasCamera(true);

      // Check if camera is available
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        setHasCamera(false);
        setError('‚ö†Ô∏è Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ camera. Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát hi·ªán ƒë·∫°i h∆°n (Chrome, Safari, Firefox).');
        return;
      }

      // Check if on HTTPS or localhost
      const isSecure = window.location.protocol === 'https:' || window.location.hostname === 'localhost';
      if (!isSecure) {
        setHasCamera(false);
        setError('‚ö†Ô∏è Camera ch·ªâ ho·∫°t ƒë·ªông tr√™n HTTPS. Vui l√≤ng truy c·∫≠p trang web qua HTTPS.');
        return;
      }

      // Request camera access with proper error handling
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: 'environment', // Use back camera on mobile
          width: { ideal: 1920 },
          height: { ideal: 1080 }
        }
      });

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        await videoRef.current.play();
        setStreaming(true);
        setHasCamera(true);
      }
    } catch (err: any) {
      console.error('Camera error:', err);
      setHasCamera(false);
      setStreaming(false);

      if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {
        setError(`üö´ B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p camera.\n\nüì± C√°ch kh·∫Øc ph·ª•c:\n‚Ä¢ Chrome/Android: V√†o Settings ‚Üí Site Settings ‚Üí Camera ‚Üí Cho ph√©p\n‚Ä¢ Safari/iOS: V√†o Settings ‚Üí Safari ‚Üí Camera ‚Üí Ask ho·∫∑c Allow\n‚Ä¢ Sau ƒë√≥ t·∫£i l·∫°i trang v√† th·ª≠ l·∫°i`);
      } else if (err.name === 'NotFoundError' || err.name === 'DevicesNotFoundError') {
        setError('üì∑ Kh√¥ng t√¨m th·∫•y camera. Vui l√≤ng ki·ªÉm tra:\n‚Ä¢ Thi·∫øt b·ªã c√≥ camera kh√¥ng?\n‚Ä¢ Camera c√≥ b·ªã ·ª©ng d·ª•ng kh√°c s·ª≠ d·ª•ng kh√¥ng?\n‚Ä¢ Th·ª≠ ƒë√≥ng c√°c ·ª©ng d·ª•ng camera kh√°c v√† th·ª≠ l·∫°i');
      } else if (err.name === 'NotReadableError' || err.name === 'TrackStartError') {
        setError('‚ö†Ô∏è Camera ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.\n\nVui l√≤ng ƒë√≥ng c√°c ·ª©ng d·ª•ng camera kh√°c v√† th·ª≠ l·∫°i.');
      } else if (err.name === 'OverconstrainedError') {
        // Try fallback with lower quality
        try {
          const fallbackStream = await navigator.mediaDevices.getUserMedia({
            video: {
              facingMode: 'environment',
              width: { ideal: 640 },
              height: { ideal: 480 }
            }
          });
          if (videoRef.current) {
            videoRef.current.srcObject = fallbackStream;
            await videoRef.current.play();
            setStreaming(true);
            setHasCamera(true);
            return;
          }
        } catch (fallbackErr) {
          setError('‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông camera v·ªõi c·∫•u h√¨nh hi·ªán t·∫°i.\n\nTh·ª≠ s·ª≠ d·ª•ng n√∫t "Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã" thay th·∫ø.');
        }
      } else if (err.name === 'SecurityError') {
        setError('üîí L·ªói b·∫£o m·∫≠t. Camera ch·ªâ ho·∫°t ƒë·ªông tr√™n:\n‚Ä¢ HTTPS (https://...)\n‚Ä¢ Localhost (http://localhost)\n\nVui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒëang truy c·∫≠p qua HTTPS.');
      } else {
        setError(`‚ùå Kh√¥ng th·ªÉ truy c·∫≠p camera: ${err.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}\n\nüí° Th·ª≠ c√°c b∆∞·ªõc sau:\n1. T·∫£i l·∫°i trang (F5)\n2. Ki·ªÉm tra quy·ªÅn camera trong Settings\n3. Th·ª≠ tr√¨nh duy·ªát kh√°c\n4. Ho·∫∑c d√πng n√∫t "Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã"`);
      }
    }
  };

  const stopCamera = () => {
    if (videoRef.current && videoRef.current.srcObject) {
      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();
      tracks.forEach(track => track.stop());
      videoRef.current.srcObject = null;
    }
    setStreaming(false);
  };

  const capturePhoto = () => {
    if (!videoRef.current || !canvasRef.current) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;

    // Set canvas size to match video
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    // Draw current video frame to canvas
    const context = canvas.getContext('2d');
    if (context) {
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      // Convert canvas to data URL
      const imageData = canvas.toDataURL('image/jpeg', 0.9);
      setCapturedImage(imageData);

      // Stop camera after capturing
      stopCamera();
    }
  };

  const handleRetake = () => {
    setCapturedImage('');
    startCamera();
  };

  const handleUsePhoto = () => {
    if (capturedImage) {
      onCapture(capturedImage);
    }
  };

  const handleClose = () => {
    stopCamera();
    setCapturedImage('');
    setError('');
    onClose();
  };

  useEffect(() => {
    if (open) {
      startCamera();
    } else {
      stopCamera();
      setCapturedImage('');
      setError('');
    }

    return () => {
      stopCamera();
    };
  }, [open]);

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Stack direction="row" alignItems="center" justifyContent="space-between">
          <Stack direction="row" alignItems="center" spacing={1}>
            <CameraAlt color="primary" />
            <Typography variant="h6">Ch·ª•p ·∫£nh ƒë·ªÉ OCR t·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin</Typography>
          </Stack>
          <IconButton onClick={handleClose} disabled={isProcessing}>
            <Close />
          </IconButton>
        </Stack>
      </DialogTitle>

      <DialogContent>
        <Stack spacing={2}>
          {error && (
            <Alert severity="error" sx={{ whiteSpace: 'pre-line' }}>
              <Typography variant="body2" component="div" sx={{ lineHeight: 1.6 }}>
                {error}
              </Typography>
              {error.includes('t·ª´ ch·ªëi') && (
                <Box sx={{ mt: 2, p: 1.5, bgcolor: 'rgba(0,0,0,0.05)', borderRadius: 1 }}>
                  <Typography variant="caption" fontWeight="bold">
                    üîß H∆∞·ªõng d·∫´n chi ti·∫øt:
                  </Typography>
                  <Typography variant="caption" display="block" sx={{ mt: 0.5 }}>
                    1. Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng üîí ho·∫∑c ‚ìò b√™n c·∫°nh URL tr√™n thanh ƒë·ªãa ch·ªâ<br />
                    2. T√¨m m·ª•c "Camera" ho·∫∑c "Permissions"<br />
                    3. Ch·ªçn "Allow" ho·∫∑c "Cho ph√©p"<br />
                    4. T·∫£i l·∫°i trang (F5) v√† th·ª≠ l·∫°i
                  </Typography>
                </Box>
              )}
            </Alert>
          )}

          {!error && !capturedImage && (
            <Alert severity="info">
              <Typography variant="body2">
                üì∏ <strong>H∆∞·ªõng d·∫´n:</strong> Ch·ª•p ·∫£nh gi·∫•y t·ªù (h√≥a ƒë∆°n, phi·∫øu b·∫£o h√†nh, tem s·∫£n ph·∫©m)
                ƒë·ªÉ h·ªá th·ªëng t·ª± ƒë·ªông tr√≠ch xu·∫•t th√¥ng tin nh∆∞ serial, gi√°, t√™n kh√°ch h√†ng, v.v.
              </Typography>
            </Alert>
          )}

          {isProcessing && (
            <Alert severity="info">
              <Box display="flex" alignItems="center" gap={2}>
                <CircularProgress size={20} />
                <Typography variant="body2">
                  ƒêang x·ª≠ l√Ω ·∫£nh v√† tr√≠ch xu·∫•t th√¥ng tin... Vui l√≤ng ƒë·ª£i.
                </Typography>
              </Box>
            </Alert>
          )}

          {/* Camera Video or Captured Image */}
          <Box
            sx={{
              position: 'relative',
              width: '100%',
              height: '400px',
              border: '2px solid #e0e0e0',
              borderRadius: 2,
              overflow: 'hidden',
              bgcolor: 'black',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          >
            {capturedImage ? (
              // Show captured image
              <img
                src={capturedImage}
                alt="Captured"
                style={{
                  width: '100%',
                  height: '100%',
                  objectFit: 'contain'
                }}
              />
            ) : (
              // Show video stream
              <>
                <video
                  ref={videoRef}
                  style={{
                    width: '100%',
                    height: '100%',
                    objectFit: 'cover'
                  }}
                  playsInline
                  muted
                />

                {/* Capture guide overlay */}
                <Box
                  sx={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                    width: '80%',
                    height: '60%',
                    border: '3px dashed rgba(255, 255, 255, 0.8)',
                    borderRadius: '8px',
                    pointerEvents: 'none',
                    '&::before': {
                      content: '""',
                      position: 'absolute',
                      top: '-3px',
                      left: '-3px',
                      width: '30px',
                      height: '30px',
                      border: '6px solid #4caf50',
                      borderRight: 'none',
                      borderBottom: 'none',
                      borderRadius: '8px 0 0 0'
                    },
                    '&::after': {
                      content: '""',
                      position: 'absolute',
                      bottom: '-3px',
                      right: '-3px',
                      width: '30px',
                      height: '30px',
                      border: '6px solid #4caf50',
                      borderLeft: 'none',
                      borderTop: 'none',
                      borderRadius: '0 0 8px 0'
                    }
                  }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '-3px',
                      right: '-3px',
                      width: '30px',
                      height: '30px',
                      border: '6px solid #4caf50',
                      borderLeft: 'none',
                      borderBottom: 'none',
                      borderRadius: '0 8px 0 0'
                    }}
                  />
                  <Box
                    sx={{
                      position: 'absolute',
                      bottom: '-3px',
                      left: '-3px',
                      width: '30px',
                      height: '30px',
                      border: '6px solid #4caf50',
                      borderRight: 'none',
                      borderTop: 'none',
                      borderRadius: '0 0 0 8px'
                    }}
                  />
                </Box>

                {/* Instruction overlay */}
                {streaming && (
                  <Box
                    sx={{
                      position: 'absolute',
                      bottom: 16,
                      left: '50%',
                      transform: 'translateX(-50%)',
                      bgcolor: 'rgba(0, 0, 0, 0.7)',
                      color: 'white',
                      px: 2,
                      py: 1,
                      borderRadius: 1
                    }}
                  >
                    <Typography variant="caption">
                      ƒê·∫∑t gi·∫•y t·ªù trong khung v√† nh·∫•n n√∫t ch·ª•p
                    </Typography>
                  </Box>
                )}
              </>
            )}
          </Box>

          {/* Hidden canvas for capturing */}
          <canvas ref={canvasRef} style={{ display: 'none' }} />

          {/* Tips */}
          {!capturedImage && (
            <Box sx={{ bgcolor: 'grey.100', p: 2, borderRadius: 1 }}>
              <Typography variant="caption" color="text.secondary">
                üí° <strong>M·∫πo ƒë·ªÉ c√≥ k·∫øt qu·∫£ OCR t·ªët nh·∫•t:</strong>
                <br />‚Ä¢ ƒê·∫£m b·∫£o √°nh s√°ng ƒë·ªß s√°ng v√† ƒë·ªÅu
                <br />‚Ä¢ Gi·ªØ camera ·ªïn ƒë·ªãnh, kh√¥ng b·ªã rung
                <br />‚Ä¢ Ch·ªØ trong ·∫£nh r√µ r√†ng, kh√¥ng b·ªã m·ªù ho·∫∑c nh√≤e
                <br />‚Ä¢ ƒê·∫∑t gi·∫•y t·ªù ph·∫≥ng, kh√¥ng b·ªã nhƒÉn ho·∫∑c cong
                <br />‚Ä¢ Camera c√°ch gi·∫•y t·ªù kho·∫£ng 20-40cm
              </Typography>
            </Box>
          )}

          {capturedImage && !isProcessing && (
            <Alert severity="success" icon={<CheckCircle />}>
              <Typography variant="body2">
                ‚úì ·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ª•p th√†nh c√¥ng! Nh·∫•n "X·ª≠ l√Ω OCR" ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª± ƒë·ªông.
              </Typography>
            </Alert>
          )}
        </Stack>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose} disabled={isProcessing}>
          H·ªßy
        </Button>

        {error && !capturedImage && (
          <Button
            onClick={startCamera}
            startIcon={<Refresh />}
            color="primary"
            variant="outlined"
          >
            Th·ª≠ l·∫°i
          </Button>
        )}

        {capturedImage ? (
          <>
            <Button
              onClick={handleRetake}
              startIcon={<Refresh />}
              disabled={isProcessing}
            >
              Ch·ª•p l·∫°i
            </Button>
            <Button
              variant="contained"
              onClick={handleUsePhoto}
              disabled={isProcessing}
              startIcon={isProcessing ? <CircularProgress size={16} /> : <CheckCircle />}
            >
              {isProcessing ? 'ƒêang x·ª≠ l√Ω...' : 'X·ª≠ l√Ω OCR'}
            </Button>
          </>
        ) : (
          <Button
            variant="contained"
            onClick={capturePhoto}
            disabled={!streaming || !hasCamera}
            startIcon={<CameraAlt />}
          >
            Ch·ª•p ·∫£nh
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
}
