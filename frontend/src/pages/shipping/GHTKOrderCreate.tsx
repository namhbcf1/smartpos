// @ts-nocheck
import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  CircularProgress,
  Radio,
  RadioGroup,
  FormControlLabel,
  Checkbox,
  InputAdornment,
  Divider,
  Paper,
  Grid,
  Autocomplete,
  Switch,
  Stack,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  ListItemAvatar,
  Avatar,
  Chip
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { useMutation } from '@tanstack/react-query';
import { api } from '../../services/api';
import {
  LocalShipping,
  Info as InfoIcon,
  ArrowForwardIos as ArrowForwardIosIcon
} from '@mui/icons-material';
import CustomerDetailsDrawer from '../../components/customers/CustomerDetailsDrawer';

const GHTKOrderCreate: React.FC = () => {
  const navigate = useNavigate();

  const [receiverData, setReceiverData] = useState({
    phone: '',
    fullName: '',
    street: '', // T√™n ƒë∆∞·ªùng (VD: Tr·∫ßn H∆∞ng ƒê·∫°o)
    hamlet: '', // T·ªï/Th√¥n/·∫§p/X√≥m
    provinceId: '',
    // districtId: '', // REMOVED - theo chu·∫©n GHTK m·ªõi kh√¥ng c·∫ßn ID c·ªßa Qu·∫≠n/Huy·ªán
    districtName: '', // Th√™m districtName - l·∫•y t·ª´ ward.district_name
    wardId: ''
  });

  const [productData, setProductData] = useState({
    name: '',
    weight: 0,
    quantity: 1,
    codAmount: 0,
    productValue: 0
  });

  const [shippingOptions, setShippingOptions] = useState({
    transport: 'express',
    pickupOption: 'pickup',
    pickupLocation: '407 Tr·∫ßn H∆∞ng ƒê·∫°o, T·ªï 10, Ph∆∞·ªùng Ph∆∞∆°ng L√¢m, H√≤a B√¨nh'
  });

  const [pickAddresses, setPickAddresses] = useState<any[]>([]);
  const [defaultPickId, setDefaultPickId] = useState<string | null>(null);

  const [provinces, setProvinces] = useState<any[]>([]);
  // const [districts, setDistricts] = useState<any[]>([]); // REMOVED - kh√¥ng c·∫ßn Qu·∫≠n/Huy·ªán
  const [wards, setWards] = useState<any[]>([]);
  const [streets, setStreets] = useState<string[]>([]);
  const [loadingWards, setLoadingWards] = useState(false);
  const [loadingStreets, setLoadingStreets] = useState(false);
  const [feeEstimate, setFeeEstimate] = useState<any>(null);
  const [loadingFee, setLoadingFee] = useState(false);
  const [isAutoFilling, setIsAutoFilling] = useState(false);
  const [sourceAddress, setSourceAddress] = useState('');
  const [openCustomerDrawer, setOpenCustomerDrawer] = useState(false);
  const [openProductSelector, setOpenProductSelector] = useState(false);
  const [products, setProducts] = useState<any[]>([]);
  const [loadingProducts, setLoadingProducts] = useState(false);
  const [productSearch, setProductSearch] = useState('');
  const streetPickTimer = React.useRef<any>(null);
  const provincePickTimer = React.useRef<any>(null);
  // const districtPickTimer = React.useRef<any>(null); // REMOVED - kh√¥ng c·∫ßn auto-pick district
  const wardPickTimer = React.useRef<any>(null);
  const housePickTimer = React.useRef<any>(null);

  // REMOVED: Fallback auto-select district - kh√¥ng c·∫ßn n·ªØa v√¨ b·ªè Qu·∫≠n/Huy·ªán
  // useEffect(() => { ... }, [districts]);

  // Fallback auto-select after lists load (ward)
  // S·ª≠a: Check provinceId thay v√¨ districtId
  useEffect(() => {
    const addr = (receiverData as any).address || '';
    if (wardPickTimer.current) { clearTimeout(wardPickTimer.current); wardPickTimer.current = null; }
    if (!addr || !receiverData.provinceId || receiverData.wardId || wards.length === 0) return;
    const lower = (addr as string).toLowerCase();
    wardPickTimer.current = setTimeout(() => {
      const match = wards.find((w: any) => lower.includes((w.name || '').toLowerCase()));
      if (match) setReceiverData(prev => ({ ...prev, wardId: String(match.id) }));
    }, 2000);
  }, [wards]);
  
  // Policy states
  const [deliveryPolicy, setDeliveryPolicy] = useState({
    saveForNext: false,
    viewGoods: true,
    callShopWhenFail: false,
    partialDeliverySelect: false,
    partialDeliveryExchange: true,
    recalledProducts: false,
    partialDeliveryDocuments: false,
    chargeWhenUndeliverable: false,
    undeliverableFee: 0
  });
  
  const [returnPolicy, setReturnPolicy] = useState({
    saveForNext: false,
    sameDayReturn: false,
    autoStoreCheck: true,
    noStoreReturn: false,
    noAcceptReturn: false,
    callShopBeforeReturn: false,
    returnConfirmation: false,
    returnAtPostOffice: false,
    needShopConfirmation: false,
    returnAddress: '415 Tr·∫ßn H∆∞ng ƒê·∫°o, T·ªï 10, Ph∆∞·ªùng Ph∆∞∆°ng L√¢m, H√≤a B√¨nh'
  });
  
  const [pickupPolicy, setPickupPolicy] = useState({
    saveForNext: false,
    callShopBeforePickup: false,
    coCheckPickup: false,
    pickupAddress: '415 Tr·∫ßn H∆∞ng ƒê·∫°o, T·ªï 10, Ph∆∞·ªùng Ph∆∞∆°ng L√¢m, H√≤a B√¨nh'
  });
  

  // Debug log ƒë·ªÉ ki·ªÉm tra state
  useEffect(() => {
    console.log('üîç Current receiverData:', receiverData);
  }, [receiverData]);

  // Function to parse Vietnamese address and find geographic IDs
  const parseAddressAndFindIds = async (address: string) => {
    if (!address) return;

    try {
      setIsAutoFilling(true);
      console.log('üîç Parsing address:', address);
      
      // Parse address components using Vietnamese address patterns
      const addressLower = address.toLowerCase();
      
      // Extract province (t·ªânh/th√†nh ph·ªë)
      let provinceName = '';
      if (addressLower.includes('h√† n·ªôi')) provinceName = 'H√† N·ªôi';
      else if (addressLower.includes('h·ªì ch√≠ minh') || addressLower.includes('tp.hcm')) provinceName = 'TP. H·ªì Ch√≠ Minh';
      else if (addressLower.includes('ƒë√† n·∫µng')) provinceName = 'ƒê√† N·∫µng';
      else if (addressLower.includes('h·∫£i ph√≤ng')) provinceName = 'H·∫£i Ph√≤ng';
      else if (addressLower.includes('c·∫ßn th∆°')) provinceName = 'C·∫ßn Th∆°';
      else if (addressLower.includes('an giang')) provinceName = 'An Giang';
      else if (addressLower.includes('b√† r·ªãa - v≈©ng t√†u')) provinceName = 'B√† R·ªãa - V≈©ng T√†u';
      else if (addressLower.includes('b·∫Øc giang')) provinceName = 'B·∫Øc Giang';
      else if (addressLower.includes('b·∫Øc k·∫°n')) provinceName = 'B·∫Øc K·∫°n';
      else if (addressLower.includes('b·∫°c li√™u')) provinceName = 'B·∫°c Li√™u';
      else if (addressLower.includes('b·∫Øc ninh')) provinceName = 'B·∫Øc Ninh';
      else if (addressLower.includes('b·∫øn tre')) provinceName = 'B·∫øn Tre';
      else if (addressLower.includes('b√¨nh ƒë·ªãnh')) provinceName = 'B√¨nh ƒê·ªãnh';
      else if (addressLower.includes('b√¨nh d∆∞∆°ng')) provinceName = 'B√¨nh D∆∞∆°ng';
      else if (addressLower.includes('b√¨nh ph∆∞·ªõc')) provinceName = 'B√¨nh Ph∆∞·ªõc';
      else if (addressLower.includes('b√¨nh thu·∫≠n')) provinceName = 'B√¨nh Thu·∫≠n';
      else if (addressLower.includes('c√† mau')) provinceName = 'C√† Mau';
      else if (addressLower.includes('cao b·∫±ng')) provinceName = 'Cao B·∫±ng';
      else if (addressLower.includes('ƒë·∫Øk l·∫Øk')) provinceName = 'ƒê·∫Øk L·∫Øk';
      else if (addressLower.includes('ƒë·∫Øk n√¥ng')) provinceName = 'ƒê·∫Øk N√¥ng';
      else if (addressLower.includes('ƒëi·ªán bi√™n')) provinceName = 'ƒêi·ªán Bi√™n';
      else if (addressLower.includes('ƒë·ªìng nai')) provinceName = 'ƒê·ªìng Nai';
      else if (addressLower.includes('ƒë·ªìng th√°p')) provinceName = 'ƒê·ªìng Th√°p';
      else if (addressLower.includes('gia lai')) provinceName = 'Gia Lai';
      else if (addressLower.includes('h√† giang')) provinceName = 'H√† Giang';
      else if (addressLower.includes('h√† nam')) provinceName = 'H√† Nam';
      else if (addressLower.includes('h√† tƒ©nh')) provinceName = 'H√† Tƒ©nh';
      else if (addressLower.includes('h·∫£i d∆∞∆°ng')) provinceName = 'H·∫£i D∆∞∆°ng';
      else if (addressLower.includes('h·∫≠u giang')) provinceName = 'H·∫≠u Giang';
      else if (addressLower.includes('h√≤a b√¨nh')) provinceName = 'H√≤a B√¨nh';
      else if (addressLower.includes('h∆∞ng y√™n')) provinceName = 'H∆∞ng Y√™n';
      else if (addressLower.includes('kh√°nh h√≤a')) provinceName = 'Kh√°nh H√≤a';
      else if (addressLower.includes('ki√™n giang')) provinceName = 'Ki√™n Giang';
      else if (addressLower.includes('kon tum')) provinceName = 'Kon Tum';
      else if (addressLower.includes('lai ch√¢u')) provinceName = 'Lai Ch√¢u';
      else if (addressLower.includes('l√¢m ƒë·ªìng')) provinceName = 'L√¢m ƒê·ªìng';
      else if (addressLower.includes('l·∫°ng s∆°n')) provinceName = 'L·∫°ng S∆°n';
      else if (addressLower.includes('l√†o cai')) provinceName = 'L√†o Cai';
      else if (addressLower.includes('long an')) provinceName = 'Long An';
      else if (addressLower.includes('nam ƒë·ªãnh')) provinceName = 'Nam ƒê·ªãnh';
      else if (addressLower.includes('ngh·ªá an')) provinceName = 'Ngh·ªá An';
      else if (addressLower.includes('ninh b√¨nh')) provinceName = 'Ninh B√¨nh';
      else if (addressLower.includes('ninh thu·∫≠n')) provinceName = 'Ninh Thu·∫≠n';
      else if (addressLower.includes('ph√∫ th·ªç')) provinceName = 'Ph√∫ Th·ªç';
      else if (addressLower.includes('ph√∫ y√™n')) provinceName = 'Ph√∫ Y√™n';
      else if (addressLower.includes('qu·∫£ng b√¨nh')) provinceName = 'Qu·∫£ng B√¨nh';
      else if (addressLower.includes('qu·∫£ng nam')) provinceName = 'Qu·∫£ng Nam';
      else if (addressLower.includes('qu·∫£ng ng√£i')) provinceName = 'Qu·∫£ng Ng√£i';
      else if (addressLower.includes('qu·∫£ng ninh')) provinceName = 'Qu·∫£ng Ninh';
      else if (addressLower.includes('qu·∫£ng tr·ªã')) provinceName = 'Qu·∫£ng Tr·ªã';
      else if (addressLower.includes('s√≥c trƒÉng')) provinceName = 'S√≥c TrƒÉng';
      else if (addressLower.includes('s∆°n la')) provinceName = 'S∆°n La';
      else if (addressLower.includes('t√¢y ninh')) provinceName = 'T√¢y Ninh';
      else if (addressLower.includes('th√°i b√¨nh')) provinceName = 'Th√°i B√¨nh';
      else if (addressLower.includes('th√°i nguy√™n')) provinceName = 'Th√°i Nguy√™n';
      else if (addressLower.includes('thanh h√≥a')) provinceName = 'Thanh H√≥a';
      else if (addressLower.includes('th·ª´a thi√™n hu·∫ø')) provinceName = 'Th·ª´a Thi√™n Hu·∫ø';
      else if (addressLower.includes('ti·ªÅn giang')) provinceName = 'Ti·ªÅn Giang';
      else if (addressLower.includes('tr√† vinh')) provinceName = 'Tr√† Vinh';
      else if (addressLower.includes('tuy√™n quang')) provinceName = 'Tuy√™n Quang';
      else if (addressLower.includes('vƒ©nh long')) provinceName = 'Vƒ©nh Long';
      else if (addressLower.includes('vƒ©nh ph√∫c')) provinceName = 'Vƒ©nh Ph√∫c';
      else if (addressLower.includes('y√™n b√°i')) provinceName = 'Y√™n B√°i';

      if (!provinceName) {
        console.log('‚ùå Could not identify province from address');
        return;
      }

      console.log('üìç Identified province:', provinceName);

      // Get provinces and find the matching one
      const provincesRes = await api.get('/shipping/geo/provinces');
      const provincesData = provincesRes.data;
      
      if (!provincesData.success) {
        console.error('‚ùå Failed to fetch provinces');
        return;
      }

      const province = provincesData.data.find((p: any) => 
        p.name.toLowerCase().includes(provinceName.toLowerCase()) ||
        provinceName.toLowerCase().includes(p.name.toLowerCase())
      );

      if (!province) {
        console.error('‚ùå Province not found:', provinceName);
        return;
      }

      console.log('‚úÖ Found province:', province);

      // Extract district (huy·ªán/qu·∫≠n)
      let districtName = '';
      if (addressLower.includes('ƒë√¥ng anh')) districtName = 'ƒê√¥ng Anh';
      else if (addressLower.includes('c·∫ßu gi·∫•y')) districtName = 'C·∫ßu Gi·∫•y';
      else if (addressLower.includes('ƒë·ªëng ƒëa')) districtName = 'ƒê·ªëng ƒêa';
      else if (addressLower.includes('hai b√† tr∆∞ng')) districtName = 'Hai B√† Tr∆∞ng';
      else if (addressLower.includes('ho√†n ki·∫øm')) districtName = 'Ho√†n Ki·∫øm';
      else if (addressLower.includes('ho√†ng mai')) districtName = 'Ho√†ng Mai';
      else if (addressLower.includes('long bi√™n')) districtName = 'Long Bi√™n';
      else if (addressLower.includes('t√¢y h·ªì')) districtName = 'T√¢y H·ªì';
      else if (addressLower.includes('thanh xu√¢n')) districtName = 'Thanh Xu√¢n';
      else if (addressLower.includes('s√≥c s∆°n')) districtName = 'S√≥c S∆°n';
      else if (addressLower.includes('gia l√¢m')) districtName = 'Gia L√¢m';
      else if (addressLower.includes('m√™ linh')) districtName = 'M√™ Linh';
      else if (addressLower.includes('h√† ƒë√¥ng')) districtName = 'H√† ƒê√¥ng';
      else if (addressLower.includes('s∆°n t√¢y')) districtName = 'S∆°n T√¢y';
      else if (addressLower.includes('ba v√¨')) districtName = 'Ba V√¨';
      else if (addressLower.includes('ch∆∞∆°ng m·ªπ')) districtName = 'Ch∆∞∆°ng M·ªπ';
      else if (addressLower.includes('ƒëan ph∆∞·ª£ng')) districtName = 'ƒêan Ph∆∞·ª£ng';
      else if (addressLower.includes('ho√†i ƒë·ª©c')) districtName = 'Ho√†i ƒê·ª©c';
      else if (addressLower.includes('m·ªπ ƒë·ª©c')) districtName = 'M·ªπ ƒê·ª©c';
      else if (addressLower.includes('ph√∫ xuy√™n')) districtName = 'Ph√∫ Xuy√™n';
      else if (addressLower.includes('ph√∫c th·ªç')) districtName = 'Ph√∫c Th·ªç';
      else if (addressLower.includes('qu·ªëc oai')) districtName = 'Qu·ªëc Oai';
      else if (addressLower.includes('th·∫°ch th·∫•t')) districtName = 'Th·∫°ch Th·∫•t';
      else if (addressLower.includes('thanh oai')) districtName = 'Thanh Oai';
      else if (addressLower.includes('thanh tr√¨')) districtName = 'Thanh Tr√¨';
      else if (addressLower.includes('th∆∞·ªùng t√≠n')) districtName = 'Th∆∞·ªùng T√≠n';
      else if (addressLower.includes('·ª©ng h√≤a')) districtName = '·ª®ng H√≤a';

      // If districtName not identified, we will fallback to fuzzy matching below
      if (!districtName) {
        console.log('‚ö†Ô∏è District name not explicitly found. Will try fuzzy match.');
      }

      console.log('üìç Identified district:', districtName);

      // Get districts for the province
      const districtsRes = await api.get(`/shipping/geo/districts/${province.id}`);
      const districtsData = districtsRes.data;
      
      if (!districtsData.success) {
        console.error('‚ùå Failed to fetch districts');
        return;
      }

      let district = null as any;
      if (districtName) {
        district = districtsData.data.find((d: any) => 
          d.name.toLowerCase().includes(districtName.toLowerCase()) ||
          districtName.toLowerCase().includes(d.name.toLowerCase())
        );
      }
      if (!district) {
        district = districtsData.data.find((d: any) => (d.name || '').toLowerCase() && addressLower.includes((d.name || '').toLowerCase()));
      }

      if (!district) {
        console.error('‚ùå District not found:', districtName);
        return;
      }

      console.log('‚úÖ Found district:', district);

      // Extract ward (ph∆∞·ªùng/x√£)
      let wardName = '';
      if (addressLower.includes('kim n·ªó')) wardName = 'Kim N·ªó';
      else if (addressLower.includes('kim chung')) wardName = 'Kim Chung';
      else if (addressLower.includes('kim h·∫°')) wardName = 'Kim H·∫°';
      else if (addressLower.includes('kim l≈©')) wardName = 'Kim L≈©';
      else if (addressLower.includes('kim s∆°n')) wardName = 'Kim S∆°n';
      else if (addressLower.includes('kim trung')) wardName = 'Kim Trung';
      else if (addressLower.includes('kim x√°')) wardName = 'Kim X√°';
      else if (addressLower.includes('kim an')) wardName = 'Kim An';
      else if (addressLower.includes('kim ƒë·ªìng')) wardName = 'Kim ƒê·ªìng';
      else if (addressLower.includes('kim giang')) wardName = 'Kim Giang';
      else if (addressLower.includes('kim li√™n')) wardName = 'Kim Li√™n';
      else if (addressLower.includes('kim m√£')) wardName = 'Kim M√£';
      else if (addressLower.includes('kim ng∆∞u')) wardName = 'Kim Ng∆∞u';
      else if (addressLower.includes('kim quang')) wardName = 'Kim Quang';
      else if (addressLower.includes('kim th·∫°ch')) wardName = 'Kim Th·∫°ch';
      else if (addressLower.includes('kim th∆∞')) wardName = 'Kim Th∆∞';
      else if (addressLower.includes('kim ti·∫øn')) wardName = 'Kim Ti·∫øn';
      else if (addressLower.includes('kim to√†n')) wardName = 'Kim To√†n';
      else if (addressLower.includes('kim vƒÉn')) wardName = 'Kim VƒÉn';
      else if (addressLower.includes('kim vinh')) wardName = 'Kim Vinh';

      // If wardName not identified, we will fallback to fuzzy matching below
      if (!wardName) {
        console.log('‚ö†Ô∏è Ward name not explicitly found. Will try fuzzy match.');
      }

      console.log('üìç Identified ward:', wardName);

      // Get wards for the district
      const wardsRes = await api.get(`/shipping/geo/wards/${district.id}`);
      const wardsData = wardsRes.data;
      
      if (!wardsData.success) {
        console.error('‚ùå Failed to fetch wards');
        return;
      }

      let ward = null as any;
      if (wardName) {
        ward = wardsData.data.find((w: any) => 
          w.name.toLowerCase().includes(wardName.toLowerCase()) ||
          wardName.toLowerCase().includes(w.name.toLowerCase())
        );
      }
      if (!ward) {
        ward = wardsData.data.find((w: any) => (w.name || '').toLowerCase() && addressLower.includes((w.name || '').toLowerCase()));
      }

      if (!ward) {
        console.error('‚ùå Ward not found:', wardName);
        return;
      }

      console.log('‚úÖ Found ward:', ward);

      // Extract street/hamlet/area (ƒë∆∞·ªùng/·∫•p/khu)
      let streetName = '';
      let hamletName = '';
      if (addressLower.includes('x√≥m b·∫øn')) streetName = 'X√≥m B·∫øn';
      else if (addressLower.includes('ƒë∆∞·ªùng')) {
        const streetMatch = addressLower.match(/ƒë∆∞·ªùng\s+([^,\s]+)/);
        if (streetMatch) streetName = streetMatch[1];
      } else if (addressLower.includes('ph·ªë')) {
        const streetMatch = addressLower.match(/ph·ªë\s+([^,\s]+)/);
        if (streetMatch) streetName = streetMatch[1];
      } else if (addressLower.includes('khu')) {
        const streetMatch = addressLower.match(/khu\s+([^,\s]+)/);
        if (streetMatch) streetName = streetMatch[1];
      } else if (addressLower.includes('·∫•p')) {
        const streetMatch = addressLower.match(/·∫•p\s+([^,\s]+)/);
        if (streetMatch) streetName = streetMatch[1];
      }

      // Try detect hamlet keywords
      const hamletMatch = addressLower.match(/\b(x√≥m|·∫•p|t·ªï|th√¥n|khu)\s+([^,]+)/);
      if (hamletMatch) {
        hamletName = `${hamletMatch[1]} ${hamletMatch[2]}`.trim();
      }

      // Extract house number (fallback)
      let houseNumber = '';
      const houseMatch = addressLower.match(/s·ªë\s+nh√†\s+([\w\-\/]+)/);
      if (houseMatch) {
        houseNumber = houseMatch[1];
      } else {
        const firstComma = address.split(',')[0];
        if (firstComma) houseNumber = firstComma.trim();
      }

      console.log('üìç Identified street:', streetName);
      console.log('üìç Identified house number:', houseNumber);

      // Update receiver data with found IDs
      setReceiverData(prev => ({
        ...prev,
        provinceId: String(province.id),
        districtName: district.name,
        wardId: String(ward.id),
        street: streetName,
        address: houseNumber ? `S·ªë nh√† ${houseNumber}` : '',
        hamlet: hamletName || prev.hamlet || 'Khu d√¢n c∆∞'
      }));

      // Load streets for the ward
      if (ward.id) {
        try {
          const streetsRes = await api.get(`/shipping/geo/streets/${ward.id}`);
          const streetsData = streetsRes.data;
          
          if (streetsData.success && streetsData.data) {
            setStreets(streetsData.data);
            console.log('‚úÖ Loaded streets:', streetsData.data.length);
          }
        } catch (error) {
          console.error('‚ùå Failed to load streets:', error);
        }
      }

      console.log('‚úÖ Address parsing completed successfully');

    } catch (error) {
      console.error('‚ùå Error parsing address:', error);
    } finally {
      setIsAutoFilling(false);
    }
  };

  // Load customer data from localStorage if available
  useEffect(() => {
    const customerData = localStorage.getItem('ghtk_customer_data');
    if (customerData) {
      try {
        const parsed = JSON.parse(customerData);
        setSourceAddress(parsed.address || '');

        // If individual address components are available, use them directly
        if (parsed.provinceId && parsed.wardId) {
          setReceiverData(prev => ({
            ...prev,
            phone: parsed.phone || '',
            fullName: parsed.name || '',
            street: parsed.street || '',
            hamlet: parsed.hamlet || '',
            provinceId: String(parsed.provinceId),
            districtName: parsed.districtName || '',
            wardId: String(parsed.wardId)
          }));
          console.log('‚úÖ Loaded customer data with address components:', parsed);
        } else {
          // Fallback to old behavior: parse address string
          setReceiverData(prev => ({
            ...prev,
            phone: parsed.phone || '',
            fullName: parsed.name || '',
            address: parsed.address || ''
          }));

          // Parse address and find geographic IDs
          if (parsed.address) {
            parseAddressAndFindIds(parsed.address);
          }
          console.log('‚úÖ Loaded customer data, parsing address:', parsed);
        }

        // Clear the data after using it
        localStorage.removeItem('ghtk_customer_data');
      } catch (error) {
        console.error('‚ùå Failed to parse customer data:', error);
        localStorage.removeItem('ghtk_customer_data');
      }
    }
  }, []);

  // Delayed auto-pick street/hamlet after streets loaded
  useEffect(() => {
    if (streetPickTimer.current) {
      clearTimeout(streetPickTimer.current);
      streetPickTimer.current = null;
    }
    const hasStreets = Array.isArray(streets) && streets.length > 0;
    const hasWard = !!receiverData.wardId;
    const streetEmpty = !receiverData.street;
    if (!hasStreets || !hasWard || !streetEmpty) return;
    const addressText = (sourceAddress || '').toLowerCase();
    streetPickTimer.current = setTimeout(() => {
      if (!addressText) return;
      const normalize = (v: any) => (typeof v === 'string' ? v : (v?.name || ''));
      const best = streets.find((s: any) => addressText.includes(normalize(s).toLowerCase()));
      const picked = normalize(best || streets[0]);
      if (picked) {
        setReceiverData(prev => ({ ...prev, street: picked }));
      }
    }, 5000); // 5s per request
    return () => {
      if (streetPickTimer.current) clearTimeout(streetPickTimer.current);
    };
  }, [streets, receiverData.wardId, receiverData.street, sourceAddress]);

  // Province auto-pick 2s after provinces loaded and address contains province
  useEffect(() => {
    if (provincePickTimer.current) { clearTimeout(provincePickTimer.current); provincePickTimer.current = null; }
    if (!sourceAddress || provinces.length === 0 || receiverData.provinceId) return;
    const lower = sourceAddress.toLowerCase();
    provincePickTimer.current = setTimeout(() => {
      const match = provinces.find((p: any) => lower.includes((p.name || '').toLowerCase()));
      if (match) setReceiverData(prev => ({ ...prev, provinceId: String(match.id) }));
    }, 2000);
  }, [provinces, sourceAddress, receiverData.provinceId]);

  // House number auto-fill after 2s if empty
  useEffect(() => {
    if (housePickTimer.current) { clearTimeout(housePickTimer.current); housePickTimer.current = null; }
    if (receiverData.address) return;
    const text = sourceAddress || '';
    if (!text) return;
    housePickTimer.current = setTimeout(() => {
      const parts = text.split(',');
      const first = parts[0]?.trim();
      if (first) setReceiverData(prev => ({ ...prev, address: first }));
    }, 2000);
  }, [sourceAddress, receiverData.address]);

  // Calculate shipping fee
  const calculateShippingFee = async () => {
    if (!receiverData.provinceId || !receiverData.districtName || !receiverData.wardId || !receiverData.street) {
      alert('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß T·ªânh/TP, Ph∆∞·ªùng/X√£ v√† ƒê∆∞·ªùng/·∫§p/Khu tr∆∞·ªõc khi t√≠nh ph√≠');
      return;
    }

    setLoadingFee(true);
    try {
      const params = new URLSearchParams();
      params.append('pick_province', 'H√≤a B√¨nh');
      params.append('pick_district', 'Th√†nh ph·ªë H√≤a B√¨nh');
      params.append('pick_address', '407 Tr·∫ßn H∆∞ng ƒê·∫°o, T·ªï 10, Ph∆∞·ªùng Ph∆∞∆°ng L√¢m');
      params.append('province', receiverData.provinceId);
      params.append('district', receiverData.districtName);
      params.append('weight', productData.weight.toString());
      
      if (receiverData.wardId) params.append('ward', receiverData.wardId);
      if (receiverData.street) params.append('street', receiverData.street);
      if (receiverData.address) params.append('address', receiverData.address);
      if (productData.value) params.append('value', productData.value.toString());
      if (shippingOptions.transport) params.append('transport', shippingOptions.transport);

      const response = await api.get(`/shipping/ghtk/calculate-fee?${params.toString()}`);
      if (response.data.success) {
        setFeeEstimate(response.data.data);
        console.log('‚úÖ Fee calculated:', response.data.data);
      }
    } catch (error) {
      console.error('‚ùå Fee calculation failed:', error);
    } finally {
      setLoadingFee(false);
    }
  };

  useEffect(() => {
  api.get('/shipping/geo/provinces').then(res => {
      if (res.data.success) setProvinces(res.data.data || []);
    });
  // Load pick addresses from GHTK and default from localStorage
  const cached = localStorage.getItem('ghtk_default_pick_id');
  if (cached) setDefaultPickId(cached);
  api.get('/shipping/ghtk/pick-addresses').then(res => {
    if (res.data.success) {
      setPickAddresses(res.data.data?.data || res.data.data || []);
    }
  }).catch(() => setPickAddresses([]));
  }, []);

  // REMOVED: Load districts - kh√¥ng c·∫ßn n·ªØa
  // useEffect(() => { ... }, [receiverData.provinceId]);

  // Load wards tr·ª±c ti·∫øp t·ª´ provinceId (b·ªè qua districtId)
  useEffect(() => {
    if (!receiverData.provinceId) {
      setWards([]);
      return;
    }

    console.log('üìç Loading ALL wards for province:', receiverData.provinceId);
    setLoadingWards(true);

    api.get(`/shipping/geo/wards-by-province/${receiverData.provinceId}`)
      .then(res => {
        if (res.data.success) {
          const wardsData = res.data.data || [];
          console.log(`‚úÖ Loaded ${res.data.total} wards for province ${receiverData.provinceId}`);
          console.log('Sample ward:', wardsData[0]); // Debug: xem ward c√≥ district_name kh√¥ng
          setWards(wardsData);

          if (!isAutoFilling) {
            setReceiverData(prev => ({
              ...prev,
              wardId: prev.wardId ? prev.wardId : '',
              districtName: prev.districtName ? prev.districtName : '',
              street: prev.street ? prev.street : ''
            }));
          }
        }
      })
      .catch(err => {
        console.error('‚ùå Failed to load wards:', err);
        setWards([]);
      })
      .finally(() => {
        setLoadingWards(false);
      });
  }, [receiverData.provinceId, isAutoFilling]);

  useEffect(() => {
    if (receiverData.wardId) {
      // L·∫•y danh s√°ch ƒë∆∞·ªùng/·∫•p/khu t·ª´ GHTK Level-4 API theo ward ƒë√£ ch·ªçn
      setLoadingStreets(true);
      console.log('üîç Loading streets for ward:', receiverData.wardId);

      api.get(`/shipping/geo/streets/${receiverData.wardId}`)
        .then(res => {
          if (res.data.success) {
            const streetData = res.data.data || [];
            console.log('‚úÖ Loaded', streetData.length, 'streets from', res.data.source || 'API');
            setStreets(streetData);
          } else {
            console.warn('‚ö†Ô∏è API returned no streets, using fallback');
            const commonStreets = [
              'Tr·∫ßn H∆∞ng ƒê·∫°o', 'L√™ L·ª£i', 'Nguy·ªÖn Hu·ªá', 'Hai B√† Tr∆∞ng', 'L√Ω Th∆∞·ªùng Ki·ªát',
              'ƒêi·ªán Bi√™n Ph·ªß', 'L√™ Du·∫©n', 'C√°ch M·∫°ng Th√°ng T√°m', 'Nguy·ªÖn Th·ªã Minh Khai',
              'V√µ VƒÉn T·∫ßn', 'Tr·∫ßn Ph√∫', 'Phan ƒê√¨nh Ph√πng', 'Nguy·ªÖn VƒÉn C·ª´', 'L√™ Th√°nh T√¥ng',
              'Ho√†ng Di·ªáu', 'Tr∆∞·ªùng Chinh', 'Nguy·ªÖn Tr√£i', 'Quang Trung', 'L·∫°c Long Qu√¢n',
              '√Çu C∆°', 'Nguy·ªÖn Du', 'B√† Tri·ªáu', 'Phan Chu Trinh', 'H√πng V∆∞∆°ng', 'L√Ω T·ª± Tr·ªçng',
              'V√µ Th·ªã S√°u', 'Tr·∫ßn Qu·ªëc To·∫£n', 'L√™ VƒÉn S·ªπ', 'Nguy·ªÖn ƒê√¨nh Chi·ªÉu', 'Ho√†ng VƒÉn Th·ª•'
            ];
            setStreets(commonStreets);
          }
        })
        .catch(err => {
          console.error('‚ùå Failed to load streets:', err);
          // Fallback: danh s√°ch ƒë∆∞·ªùng ph·ªï bi·∫øn
          const commonStreets = [
            'Tr·∫ßn H∆∞ng ƒê·∫°o', 'L√™ L·ª£i', 'Nguy·ªÖn Hu·ªá', 'Hai B√† Tr∆∞ng', 'L√Ω Th∆∞·ªùng Ki·ªát',
            'ƒêi·ªán Bi√™n Ph·ªß', 'L√™ Du·∫©n', 'C√°ch M·∫°ng Th√°ng T√°m', 'Nguy·ªÖn Th·ªã Minh Khai',
            'V√µ VƒÉn T·∫ßn', 'Tr·∫ßn Ph√∫', 'Phan ƒê√¨nh Ph√πng', 'Nguy·ªÖn VƒÉn C·ª´', 'L√™ Th√°nh T√¥ng',
            'Ho√†ng Di·ªáu', 'Tr∆∞·ªùng Chinh', 'Nguy·ªÖn Tr√£i', 'Quang Trung', 'L·∫°c Long Qu√¢n',
            '√Çu C∆°', 'Nguy·ªÖn Du', 'B√† Tri·ªáu', 'Phan Chu Trinh', 'H√πng V∆∞∆°ng', 'L√Ω T·ª± Tr·ªçng',
            'V√µ Th·ªã S√°u', 'Tr·∫ßn Qu·ªëc To·∫£n', 'L√™ VƒÉn S·ªπ', 'Nguy·ªÖn ƒê√¨nh Chi·ªÉu', 'Ho√†ng VƒÉn Th·ª•'
          ];
          setStreets(commonStreets);
        })
        .finally(() => {
          setLoadingStreets(false);
        });
    } else {
      setStreets([]);
      setLoadingStreets(false);
    }
  }, [receiverData.wardId]);

  useEffect(() => {
    if (receiverData.provinceId && receiverData.districtName && productData.weight > 0) {
      const timer = setTimeout(() => calculateFee(), 500);
      return () => clearTimeout(timer);
    }
  }, [receiverData.provinceId, receiverData.districtName, productData.weight, shippingOptions.transport, productData.codAmount]);

  const calculateFee = () => {
    const province = provinces.find(p => p.id === receiverData.provinceId);
    if (!province || !receiverData.districtName) return;

    const transport = shippingOptions.transport === 'express' || shippingOptions.transport === 'bbs' ? 'road' : shippingOptions.transport;

    api.post('/shipping/ghtk/fee', {
      pick_province: 'Ha Noi',
      pick_district: 'Quan Hoan Kiem',
      province: province.name,
      district: receiverData.districtName, // D√πng districtName t·ª´ ward
      weight: productData.weight * 1000,
      value: productData.codAmount,
      transport
    }).then(res => {
      if (res.data.success) setFeeEstimate(res.data.data?.fee || 0);
    }).catch(err => console.error('Failed to calculate fee:', err));
  };

  const createOrderMutation = useMutation({
    mutationFn: async () => {
      const province = provinces.find(p => p.id === receiverData.provinceId);
      const ward = wards.find(w => w.id === receiverData.wardId);

      if (!province || !receiverData.districtName || !ward) {
        throw new Error('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ');
      }

      const transport = shippingOptions.transport === 'express' || shippingOptions.transport === 'bbs' ? 'road' : shippingOptions.transport;

      const payload = {
        order: {
          id: `ORDER-${Date.now()}`,
          name: receiverData.fullName,
          tel: receiverData.phone,
          address: receiverData.street, // Ch·ªâ t√™n ƒë∆∞·ªùng
          hamlet: receiverData.hamlet || 'Khu d√¢n c∆∞', // T·ªï/Th√¥n/·∫§p (b·∫Øt bu·ªôc theo GHTK)
          province: province.name,
          district: receiverData.districtName, // L·∫•y t·ª´ ward.district_name
          ward: ward.name,
          pick_name: 'TR∆Ø·ªúNG PH√ÅT COMPUTER',
          pick_tel: '0836768597',
          pick_address: '407 Tr·∫ßn H∆∞ng ƒê·∫°o, T·ªï 10, Ph∆∞·ªùng Ph∆∞∆°ng L√¢m',
          pick_province: 'H√≤a B√¨nh',
          pick_district: 'Th√†nh ph·ªë H√≤a B√¨nh',
          value: Math.max(1, productData.productValue),
          pick_money: 0, // ƒê∆°n kh√¥ng thu ti·ªÅn - COD = 0
          weight: productData.weight,
          transport,
          note: '',
          is_freeship: 0
        },
        products: [{
          name: productData.name,
          weight: productData.weight,
          quantity: productData.quantity,
          value: Math.max(1, productData.productValue) // GHTK y√™u c·∫ßu value >= 1 ƒë·ªìng
        }]
      };

      console.log('üöÄ Creating GHTK order:', payload);
      const response = await api.post('/shipping/ghtk/order', payload);
      return response.data;
    },
    onSuccess: () => {
      alert('‚úÖ T·∫°o ƒë∆°n th√†nh c√¥ng!');
      navigate('/shipping/orders');
    },
    onError: (error: any) => {
      console.error('‚ùå Failed:', error);
      console.error('‚ùå Response data:', error?.response?.data);
      const errorMsg = error?.response?.data?.error || error?.response?.data?.message || error?.message || 'Kh√¥ng th·ªÉ t·∫°o ƒë∆°n';
      const ghtkError = error?.response?.data?.data?.message || '';
      const fullError = ghtkError ? `${errorMsg}\nGHTK: ${ghtkError}` : errorMsg;
      alert('‚ùå L·ªói: ' + fullError);
    }
  });

  // Load products from API
  const loadProducts = async () => {
    try {
      setLoadingProducts(true);
      const response = await api.get('/api/products');
      console.log('üì¶ Products loaded:', response.data);

      if (response.data.success && response.data.data) {
        setProducts(response.data.data);
      } else if (Array.isArray(response.data)) {
        setProducts(response.data);
      } else {
        setProducts([]);
      }
    } catch (error) {
      console.error('‚ùå Failed to load products:', error);
      setProducts([]);
    } finally {
      setLoadingProducts(false);
    }
  };

  // Handle product selection
  const handleSelectProduct = (product: any) => {
    console.log('‚úÖ Selected product:', product);

    // Fill product data from selected product
    setProductData({
      name: product.name || product.product_name || '',
      weight: parseFloat(product.weight) || 0.5, // Default 0.5kg if not specified
      quantity: 1,
      codAmount: parseFloat(product.price) || 0,
      productValue: parseFloat(product.price) || 0
    });

    // Close the product selector dialog
    setOpenProductSelector(false);
    setProductSearch('');

    alert(`‚úÖ ƒê√£ ch·ªçn s·∫£n ph·∫©m: ${product.name || product.product_name}`);
  };

  // Load products when opening the product selector
  useEffect(() => {
    if (openProductSelector && products.length === 0) {
      loadProducts();
    }
  }, [openProductSelector]);

  const isFormValid = () => {
    const isValid = (
      receiverData.phone &&
      receiverData.fullName &&
      receiverData.provinceId &&
      receiverData.districtName &&
      receiverData.wardId &&
      receiverData.street &&
      // hamlet kh√¥ng b·∫Øt bu·ªôc - c√≥ th·ªÉ ƒë·ªÉ tr·ªëng
      productData.name &&
      productData.weight > 0
    );
    
    // Debug log ƒë·ªÉ ki·ªÉm tra validation
    console.log('üîç Form Validation Debug:', {
      phone: receiverData.phone,
      fullName: receiverData.fullName,
      provinceId: receiverData.provinceId,
      districtName: receiverData.districtName,
      wardId: receiverData.wardId,
      street: receiverData.street,
      hamlet: receiverData.hamlet,
      productName: productData.name,
      productWeight: productData.weight,
      isValid
    });
    
    return isValid;
  };

  const totalWeight = productData.weight * productData.quantity;
  const totalAmount = (feeEstimate?.fee || 0) + productData.codAmount;

  // Build a lightweight customer object for the details drawer (to mirror registration view)
  const selectedProvince = provinces.find((p: any) => String(p.id) === String(receiverData.provinceId));
  const selectedWard = wards.find((w: any) => String(w.id) === String(receiverData.wardId));
  const composedAddress = [receiverData.address, receiverData.street, selectedWard?.name, receiverData.districtName, selectedProvince?.name]
    .filter(Boolean)
    .join(', ');
  const drawerCustomer = {
    name: receiverData.fullName,
    phone: receiverData.phone,
    email: '',
    customer_type: 'regular',
    is_active: true,
    province_name: selectedProvince?.name,
    district_name: receiverData.districtName, // L·∫•y t·ª´ ward.district_name
    ward_name: selectedWard?.name,
    street: receiverData.street,
    address: composedAddress,
    total_orders: 0,
    total_spent_cents: 0,
    loyalty_points: 0
  } as any;

  return (
    <Box sx={{
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      minHeight: '100vh',
      py: 4
    }}>
      <Container maxWidth="xl">
        {/* Header */}
        <Box sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          mb: 4,
          p: 3,
          bgcolor: 'rgba(255,255,255,0.95)',
          borderRadius: 3,
          boxShadow: '0 8px 32px rgba(0,0,0,0.1)'
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Box sx={{
              width: 56,
              height: 56,
              borderRadius: 2,
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: 28
            }}>
              üöö
            </Box>
            <Box>
              <Typography variant="h4" fontWeight={700} sx={{
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent'
              }}>
                T·∫°o ƒë∆°n h√†ng GHTK
              </Typography>
              <Typography variant="body2" sx={{ color: '#666', mt: 0.5, fontSize: 15 }}>
                Giao h√†ng ti·∫øt ki·ªám - Nhanh ch√≥ng & Ti·ªán l·ª£i
              </Typography>
            </Box>
          </Box>
          <Button
            variant="outlined"
            size="large"
            sx={{
              borderColor: '#667eea',
              color: '#667eea',
              textTransform: 'none',
              fontSize: 16,
              fontWeight: 600,
              px: 3,
              borderWidth: 2,
              '&:hover': {
                borderWidth: 2,
                borderColor: '#764ba2',
                bgcolor: 'rgba(102, 126, 234, 0.05)'
              }
            }}
          >
            üì∑ ·∫¢nh ƒêH
          </Button>
        </Box>

        <Grid container spacing={2.5}>
          {/* LEFT COLUMN */}
          <Grid item xs={12} md={6}>
            {/* NG∆Ø·ªúI NH·∫¨N */}
            <Paper elevation={3} sx={{
              p: 4,
              mb: 3,
              borderRadius: 3,
              bgcolor: 'rgba(255,255,255,0.95)',
              boxShadow: '0 8px 24px rgba(0,0,0,0.08)',
              border: '2px solid rgba(102, 126, 234, 0.1)',
              transition: 'all 0.3s ease',
              '&:hover': {
                boxShadow: '0 12px 32px rgba(0,0,0,0.12)',
                transform: 'translateY(-2px)'
              }
            }}>
              <Box sx={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                mb: 3,
                pb: 2,
                borderBottom: '2px solid rgba(102, 126, 234, 0.2)'
              }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <Box sx={{
                    width: 48,
                    height: 48,
                    borderRadius: 2,
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: 24
                  }}>
                    üë§
                  </Box>
                  <Typography variant="h6" fontWeight={700} sx={{ color: '#1a1a1a', fontSize: 20 }}>
                    NG∆Ø·ªúI NH·∫¨N
                  </Typography>
                </Box>
                <FormControlLabel
                  control={<Radio sx={{ '&.Mui-checked': { color: '#667eea' } }} />}
                  label={<Typography sx={{ fontSize: 16, fontWeight: 500 }}>Giao v·ªÅ shop</Typography>}
                  sx={{ m: 0 }}
                />
              </Box>

              <TextField
                fullWidth
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng"
                value={receiverData.phone}
                onChange={(e) => setReceiverData({ ...receiverData, phone: e.target.value })}
                sx={{
                  mb: 3,
                  '& .MuiOutlinedInput-root': {
                    fontSize: 17,
                    height: 56,
                    bgcolor: '#f8f9ff',
                    '&:hover': { bgcolor: '#f0f2ff' },
                    '&.Mui-focused': {
                      bgcolor: '#fff',
                      '& fieldset': { borderColor: '#667eea', borderWidth: 2 }
                    }
                  }
                }}
                InputProps={{
                  startAdornment: <InputAdornment position="start"><span style={{ fontSize: 24 }}>üìû</span></InputAdornment>
                }}
              />

              <TextField
                fullWidth
                placeholder="T√™n kh√°ch h√†ng"
                value={receiverData.fullName}
                onChange={(e) => setReceiverData({ ...receiverData, fullName: e.target.value })}
                sx={{
                  mb: 3,
                  '& .MuiOutlinedInput-root': {
                    fontSize: 17,
                    height: 56,
                    bgcolor: '#f8f9ff',
                    '&:hover': { bgcolor: '#f0f2ff' },
                    '&.Mui-focused': {
                      bgcolor: '#fff',
                      '& fieldset': { borderColor: '#667eea', borderWidth: 2 }
                    }
                  }
                }}
                InputProps={{
                  startAdornment: <InputAdornment position="start"><span style={{ fontSize: 24 }}>üë§</span></InputAdornment>
                }}
              />

              <Box sx={{ display: 'flex', gap: 1.5, mb: 2 }}>
                <Button
                  variant="outlined"
                  size="small"
                  onClick={() => setOpenCustomerDrawer(true)}
                  sx={{ textTransform: 'none' }}
                >
                  Xem chi ti·∫øt kh√°ch h√†ng
                </Button>
                <Button
                  variant="text"
                  size="small"
                  onClick={() => navigate('/dang-ky-khach-hang')}
                  sx={{ textTransform: 'none' }}
                >
                  ƒêƒÉng k√Ω kh√°ch h√†ng
                </Button>
              </Box>

              {/* FORM ƒê·ªäA CH·ªà 2x2 GRID - Ch·ªçn ƒë·ªãa ch·ªâ theo th·ª© t·ª± */}
              <Box sx={{ 
                display: 'grid', 
                gridTemplateColumns: '1fr 1fr', 
                gap: 2, 
                mb: 3 
              }}>
                {/* H√†ng 1 - C·ªôt 1: ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß (read-only) */}
                <TextField
                  fullWidth
                  label="ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
                  value={composedAddress}
                  InputProps={{
                    readOnly: true,
                    startAdornment: (
                      <InputAdornment position="start">
                        <span style={{ fontSize: 18, color: '#667eea' }}>üìç</span>
                      </InputAdornment>
                    )
                  }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      fontSize: 16,
                      height: 56,
                      bgcolor: '#f8f9ff',
                      '&:hover': { bgcolor: '#f0f2ff' },
                      '&.Mui-focused': {
                        bgcolor: '#fff',
                        '& fieldset': { borderColor: '#667eea', borderWidth: 2 }
                      }
                    },
                    '& .MuiInputLabel-root': { fontSize: 16, fontWeight: 500 }
                  }}
                />

                {/* H√†ng 1 - C·ªôt 2: ƒê∆∞·ªùng/·∫§p/Khu (GHTK Level-4) */}
                <Autocomplete
                  options={streets}
                  value={receiverData.street || null}
                  onChange={(event, newValue) => {
                    console.log('üîç Street selected via Autocomplete:', newValue);
                    setReceiverData(prev => ({ ...prev, street: newValue || '' }));
                  }}
                  disabled={!receiverData.wardId || loadingStreets}
                  loading={loadingStreets}
                  loadingText="ƒêang t·∫£i ƒë·ªãa ch·ªâ t·ª´ GHTK..."
                  noOptionsText={receiverData.wardId ? 'Kh√¥ng c√≥ d·ªØ li·ªáu' : 'Ch·ªçn Ph∆∞·ªùng/X√£ tr∆∞·ªõc'}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label={loadingStreets ? 'ƒêang t·∫£i...' : 'ƒê∆∞·ªùng/·∫§p/Khu'}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          fontSize: 16,
                          height: 56,
                          bgcolor: receiverData.wardId && !loadingStreets ? '#f8f9ff' : '#f5f5f5',
                          '&:hover': { bgcolor: receiverData.wardId && !loadingStreets ? '#f0f2ff' : '#f5f5f5' },
                          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                            borderColor: '#667eea',
                            borderWidth: 2
                          },
                          '&.Mui-disabled': {
                            bgcolor: '#f5f5f5',
                            '& .MuiAutocomplete-endAdornment': { color: '#999' }
                          }
                        },
                        '& .MuiInputLabel-root': {
                          fontSize: 16,
                          fontWeight: 500,
                          '&.Mui-focused': { color: '#667eea' },
                          '&.Mui-disabled': { color: '#999' }
                        },
                        '& .MuiAutocomplete-endAdornment': {
                          color: '#667eea',
                          fontSize: 20
                        }
                      }}
                      InputProps={{
                        ...params.InputProps,
                        endAdornment: (
                          <>
                            {loadingStreets ? <CircularProgress color="inherit" size={20} /> : null}
                            {params.InputProps.endAdornment}
                          </>
                        ),
                      }}
                    />
                  )}
                  renderOption={(props, option) => (
                    <Box
                      component="li"
                      {...props}
                      sx={{
                        fontSize: 15,
                        padding: '12px 16px',
                        whiteSpace: 'normal',
                        wordWrap: 'break-word',
                        cursor: 'pointer',
                        '&:hover': {
                          bgcolor: '#f0f2ff'
                        }
                      }}
                    >
                      {option}
                    </Box>
                  )}
                  ListboxProps={{
                    sx: {
                      maxHeight: 400,
                      '& .MuiAutocomplete-option': {
                        fontSize: 15,
                        padding: '12px 16px',
                        whiteSpace: 'normal',
                        wordWrap: 'break-word',
                        cursor: 'pointer',
                        '&:hover': {
                          bgcolor: '#f0f2ff'
                        },
                        '&.Mui-focused': {
                          bgcolor: '#e3f2fd'
                        }
                      }
                    }
                  }}
                />
                {streets.length > 0 && !loadingStreets && (
                  <Typography variant="caption" sx={{ mt: 0.5, ml: 1, color: '#4caf50', fontSize: 12 }}>
                    ‚úÖ {streets.length} ƒë·ªãa ch·ªâ t·ª´ GHTK
                  </Typography>
                )}

                {/* H√†ng 2 - C·ªôt 1: Ph∆∞·ªùng/X√£ - Hi·ªÉn th·ªã "Ph∆∞·ªùng X (Qu·∫≠n Y)" */}
                <Box>
                  <FormControl fullWidth>
                    <InputLabel sx={{
                      fontSize: 16,
                      fontWeight: 500,
                      '&.Mui-focused': { color: '#667eea' }
                    }}>
                      {loadingWards ? 'ƒêang t·∫£i...' : 'Ph∆∞·ªùng/X√£'}
                    </InputLabel>
                    <Select
                      value={receiverData.wardId}
                      label={loadingWards ? 'ƒêang t·∫£i...' : 'Ph∆∞·ªùng/X√£'}
                      onChange={(e) => {
                        const selectedWard = wards.find(w => w.id === e.target.value);
                        console.log('üîç Ward selected:', selectedWard);
                        setReceiverData({
                          ...receiverData,
                          wardId: e.target.value,
                          districtName: selectedWard?.district_name || '' // L∆∞u district_name t·ª´ ward
                        });
                      }}
                      disabled={!receiverData.provinceId || loadingWards}
                      sx={{
                        fontSize: 16,
                        height: 56,
                        bgcolor: receiverData.provinceId && !loadingWards ? '#f8f9ff' : '#f5f5f5',
                        '&:hover': { bgcolor: receiverData.provinceId && !loadingWards ? '#f0f2ff' : '#f5f5f5' },
                        '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                          borderColor: '#667eea',
                          borderWidth: 2
                        },
                        '& .MuiSelect-icon': {
                          fontSize: 20,
                          color: '#667eea'
                        }
                      }}
                      MenuProps={{
                        PaperProps: {
                          sx: {
                            maxHeight: 400,
                            '& .MuiMenuItem-root': {
                              fontSize: 15,
                              padding: '10px 16px',
                              whiteSpace: 'normal',
                              wordWrap: 'break-word'
                            }
                          }
                        }
                      }}
                    >
                      <MenuItem value="" sx={{ fontSize: 16 }}>
                        <em>-- Ch·ªçn Ph∆∞·ªùng/X√£ --</em>
                      </MenuItem>
                      {loadingWards ? (
                        <MenuItem disabled sx={{ fontSize: 16 }}>
                          <CircularProgress size={20} sx={{ mr: 2 }} />
                          ƒêang t·∫£i ph∆∞·ªùng/x√£...
                        </MenuItem>
                      ) : wards.length === 0 ? (
                        <MenuItem disabled sx={{ fontSize: 16 }}>
                          <em>{receiverData.provinceId ? 'Kh√¥ng c√≥ d·ªØ li·ªáu' : 'Ch·ªçn T·ªânh/TP tr∆∞·ªõc'}</em>
                        </MenuItem>
                      ) : (
                        wards.map(w => (
                          <MenuItem key={w.id} value={w.id} sx={{ fontSize: 15 }}>
                            {w.name}
                          </MenuItem>
                        ))
                      )}
                    </Select>
                  </FormControl>
                  {wards.length > 0 && !loadingWards && (
                    <Typography variant="caption" sx={{ mt: 0.5, ml: 1, color: '#4caf50', fontSize: 12, display: 'block' }}>
                      ‚úÖ {wards.length} ph∆∞·ªùng/x√£ trong t·ªânh
                    </Typography>
                  )}
                </Box>

                {/* H√†ng 2 - C·ªôt 2: T·ªânh/TP */}
                <FormControl fullWidth>
                  <InputLabel sx={{ 
                    fontSize: 16, 
                    fontWeight: 500, 
                    '&.Mui-focused': { color: '#667eea' } 
                  }}>
                    T·ªânh/TP
                  </InputLabel>
                  <Select
                    value={receiverData.provinceId}
                    label="T·ªânh/TP"
                    onChange={(e) => setReceiverData({ ...receiverData, provinceId: e.target.value })}
                    sx={{
                      fontSize: 16,
                      height: 56,
                      bgcolor: '#f8f9ff',
                      '&:hover': { bgcolor: '#f0f2ff' },
                      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                        borderColor: '#667eea',
                        borderWidth: 2
                      },
                      '& .MuiSelect-icon': {
                        fontSize: 20,
                        color: '#667eea'
                      }
                    }}
                    MenuProps={{
                      PaperProps: {
                        sx: {
                          maxHeight: 300,
                          '& .MuiMenuItem-root': {
                            fontSize: 16,
                            padding: '8px 16px'
                          }
                        }
                      }
                    }}
                  >
                    <MenuItem value="" sx={{ fontSize: 16 }}>
                      <em>-- Ch·ªçn T·ªânh/TP --</em>
                    </MenuItem>
                    {provinces.map(p => (
                      <MenuItem key={p.id} value={p.id} sx={{ fontSize: 16 }}>{p.name}</MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Box>

              {/* QU·∫¨N/HUY·ªÜN - REMOVED theo chu·∫©n GHTK m·ªõi */}
              {/* Ph∆∞·ªùng/X√£ s·∫Ω load tr·ª±c ti·∫øp t·ª´ T·ªânh/TP */}
            </Paper>

            {/* L·∫§Y & GIAO T·∫¨N N∆†I */}
            <Paper elevation={3} sx={{
              p: 4,
              mb: 3,
              borderRadius: 3,
              bgcolor: 'rgba(255,255,255,0.95)',
              boxShadow: '0 8px 24px rgba(0,0,0,0.08)',
              border: '2px solid rgba(102, 126, 234, 0.1)',
              transition: 'all 0.3s ease',
              '&:hover': {
                boxShadow: '0 12px 32px rgba(0,0,0,0.12)',
                transform: 'translateY(-2px)'
              }
            }}>
              <Box sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                mb: 3,
                pb: 2,
                borderBottom: '2px solid rgba(102, 126, 234, 0.2)'
              }}>
                <Box sx={{
                  width: 48,
                  height: 48,
                  borderRadius: 2,
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: 24
                }}>
                  üöö
                </Box>
                <Typography variant="h6" fontWeight={700} sx={{ color: '#1a1a1a', fontSize: 20 }}>
                  L·∫•y & Giao t·∫≠n n∆°i
                </Typography>
              </Box>

              <RadioGroup
                value={shippingOptions.transport}
                onChange={(e) => setShippingOptions({ ...shippingOptions, transport: e.target.value })}
              >
                <FormControlLabel
                  value="express"
                  control={<Radio sx={{ '&.Mui-checked': { color: '#667eea' } }} />}
                  label={<Typography sx={{ fontSize: 17, fontWeight: 500 }}>EXPRESS nhanh &lt; 20kg</Typography>}
                  sx={{ mb: 1.5, p: 1.5, borderRadius: 2, '&:hover': { bgcolor: '#f8f9ff' } }}
                />
                <FormControlLabel
                  value="bbs"
                  control={<Radio sx={{ '&.Mui-checked': { color: '#667eea' } }} />}
                  label={<Typography sx={{ fontSize: 17, fontWeight: 500 }}>BBS l·ªõn ‚â• 20kg</Typography>}
                  sx={{ mb: 1.5, p: 1.5, borderRadius: 2, '&:hover': { bgcolor: '#f8f9ff' } }}
                />
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1.5, p: 1.5, borderRadius: 2, '&:hover': { bgcolor: '#f8f9ff' } }}>
                  <Radio
                    value="road"
                    checked={shippingOptions.transport === 'road'}
                    onChange={(e) => setShippingOptions({ ...shippingOptions, transport: e.target.value })}
                    sx={{ '&.Mui-checked': { color: '#667eea' } }}
                  />
                  <Typography sx={{ fontSize: 17, fontWeight: 500, mr: 2 }}>B·ªô</Typography>
                  <Grid container spacing={1} sx={{ flex: 1 }}>
                    <Grid item xs={6}>
                      <FormControl fullWidth size="small">
                        <InputLabel>H·∫πn l·∫•y</InputLabel>
                        <Select
                          label="H·∫πn l·∫•y"
                          sx={{ fontSize: 14, height: 40, bgcolor: '#f8f9ff' }}
                        >
                          <MenuItem value="">-- Ch·ªçn --</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                    <Grid item xs={6}>
                      <FormControl fullWidth size="small">
                        <InputLabel>H·∫πn giao</InputLabel>
                        <Select
                          label="H·∫πn giao"
                          sx={{ fontSize: 14, height: 40, bgcolor: '#f8f9ff' }}
                        >
                          <MenuItem value="">-- Ch·ªçn --</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                  </Grid>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, p: 1.5, borderRadius: 2, '&:hover': { bgcolor: '#f8f9ff' } }}>
                  <Radio
                    value="fly"
                    checked={shippingOptions.transport === 'fly'}
                    onChange={(e) => setShippingOptions({ ...shippingOptions, transport: e.target.value })}
                    sx={{ '&.Mui-checked': { color: '#667eea' } }}
                  />
                  <Typography sx={{ fontSize: 17, fontWeight: 500, mr: 2 }}>Bay</Typography>
                  <Grid container spacing={1} sx={{ flex: 1 }}>
                    <Grid item xs={6}>
                      <FormControl fullWidth size="small">
                        <InputLabel>H·∫πn l·∫•y</InputLabel>
                        <Select
                          label="H·∫πn l·∫•y"
                          sx={{ fontSize: 14, height: 40, bgcolor: '#f8f9ff' }}
                        >
                          <MenuItem value="">-- Ch·ªçn --</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                    <Grid item xs={6}>
                      <FormControl fullWidth size="small">
                        <InputLabel>H·∫πn giao</InputLabel>
                        <Select
                          label="H·∫πn giao"
                          sx={{ fontSize: 14, height: 40, bgcolor: '#f8f9ff' }}
                        >
                          <MenuItem value="">-- Ch·ªçn --</MenuItem>
                        </Select>
                      </FormControl>
                    </Grid>
                  </Grid>
                </Box>
              </RadioGroup>
            </Paper>

            {/* H√åNH TH·ª®C L·∫§Y H√ÄNG */}
            <Paper elevation={3} sx={{
              p: 4,
              borderRadius: 3,
              bgcolor: 'rgba(255,255,255,0.95)',
              boxShadow: '0 8px 24px rgba(0,0,0,0.08)',
              border: '2px solid rgba(102, 126, 234, 0.1)',
              transition: 'all 0.3s ease',
              '&:hover': {
                boxShadow: '0 12px 32px rgba(0,0,0,0.12)',
                transform: 'translateY(-2px)'
              }
            }}>
              <Box sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                mb: 3,
                pb: 2,
                borderBottom: '2px solid rgba(102, 126, 234, 0.2)'
              }}>
                <Box sx={{
                  width: 48,
                  height: 48,
                  borderRadius: 2,
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: 24
                }}>
                  üì¶
                </Box>
                <Typography variant="h6" fontWeight={700} sx={{ color: '#1a1a1a', fontSize: 20 }}>
                  H√¨nh th·ª©c l·∫•y h√†ng
                </Typography>
              </Box>

              <RadioGroup
                value={shippingOptions.pickupOption}
                onChange={(e) => setShippingOptions({ ...shippingOptions, pickupOption: e.target.value })}
              >
                <FormControlLabel
                  value="pickup"
                  control={<Radio sx={{ '&.Mui-checked': { color: '#667eea' } }} />}
                  label={<Typography sx={{ fontSize: 17, fontWeight: 500 }}>L·∫•y h√†ng t·∫≠n n∆°i</Typography>}
                  sx={{ mb: 1.5, p: 1.5, borderRadius: 2, '&:hover': { bgcolor: '#f8f9ff' } }}
                />
                {shippingOptions.pickupOption === 'pickup' && (
                  <Box sx={{
                    ml: 6,
                    mt: 1,
                    mb: 2,
                    p: 2.5,
                    bgcolor: '#f8f9ff',
                    borderRadius: 2,
                    border: '2px dashed #667eea'
                  }}>
                    <FormControl fullWidth size="small" sx={{ mb: 2 }}>
                      <InputLabel>ƒêi·ªÉm l·∫•y h√†ng (GHTK)</InputLabel>
                      <Select
                        label="ƒêi·ªÉm l·∫•y h√†ng (GHTK)"
                        value={defaultPickId || ''}
                        onChange={(e) => { setDefaultPickId(e.target.value as string); localStorage.setItem('ghtk_default_pick_id', String(e.target.value)); }}
                      >
                        <MenuItem value="">-- Ch·ªçn --</MenuItem>
                        {pickAddresses.map((p: any) => (
                          <MenuItem key={p.id || p.pick_address_id || p.address} value={String(p.id || p.pick_address_id || p.address)}>
                            {p.name || p.pick_name} - {(p.address || p.pick_address)}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                    <FormControl fullWidth>
                      <TextField
                        fullWidth
                        value={shippingOptions.pickupLocation}
                        onChange={(e) => setShippingOptions({ ...shippingOptions, pickupLocation: e.target.value })}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            fontSize: 16,
                            height: 48,
                            bgcolor: '#fff',
                            '&:hover': { bgcolor: '#f8f9ff' },
                            '&.Mui-focused': {
                              bgcolor: '#fff',
                              '& fieldset': { borderColor: '#667eea', borderWidth: 2 }
                            }
                          }
                        }}
                        InputProps={{
                          endAdornment: (
                            <InputAdornment position="end">
                              <span style={{ fontSize: 20, color: '#667eea' }}>‚ñº</span>
                            </InputAdornment>
                          )
                        }}
                      />
                    </FormControl>
                  </Box>
                )}

                <FormControlLabel
                  value="dropoff"
                  control={<Radio sx={{ '&.Mui-checked': { color: '#667eea' } }} />}
                  label={<Typography sx={{ fontSize: 17, fontWeight: 500 }}>G·ª≠i h√†ng b∆∞u c·ª•c</Typography>}
                  sx={{ p: 1.5, borderRadius: 2, '&:hover': { bgcolor: '#f8f9ff' } }}
                />
                {shippingOptions.pickupOption === 'dropoff' && (
                  <Box sx={{ ml: 6, mt: 2 }}>
                    <Button
                      fullWidth
                      variant="outlined"
                      sx={{
                        fontSize: 16,
                        height: 48,
                        bgcolor: '#f8f9ff',
                        borderColor: '#667eea',
                        color: '#667eea',
                        textTransform: 'none',
                        fontWeight: 500,
                        justifyContent: 'space-between',
                        px: 2,
                        '&:hover': {
                          bgcolor: '#f0f2ff',
                          borderColor: '#764ba2'
                        }
                      }}
                      endIcon={<span style={{ fontSize: 20 }}>‚ñº</span>}
                    >
                      B·∫•m ch·ªçn B∆∞u c·ª•c g·∫ßn nh·∫•t
                    </Button>
                  </Box>
                )}
              </RadioGroup>
            </Paper>
          </Grid>

          {/* RIGHT COLUMN */}
          <Grid item xs={12} md={6}>
            {/* S·∫¢N PH·∫®M */}
            <Paper elevation={3} sx={{
              p: 4,
              mb: 3,
              borderRadius: 3,
              bgcolor: 'rgba(255,255,255,0.95)',
              boxShadow: '0 8px 24px rgba(0,0,0,0.08)',
              border: '2px solid rgba(102, 126, 234, 0.1)',
              transition: 'all 0.3s ease',
              '&:hover': {
                boxShadow: '0 12px 32px rgba(0,0,0,0.12)',
                transform: 'translateY(-2px)'
              }
            }}>
              <Box sx={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                mb: 3,
                pb: 2,
                borderBottom: '2px solid rgba(102, 126, 234, 0.2)'
              }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <Box sx={{
                    width: 48,
                    height: 48,
                    borderRadius: 2,
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: 24
                  }}>
                    üõçÔ∏è
                  </Box>
                  <Typography variant="h6" fontWeight={700} sx={{ color: '#1a1a1a', fontSize: 20 }}>
                    S·∫£n ph·∫©m
                  </Typography>
                </Box>
                <Button
                  variant="outlined"
                  onClick={() => setOpenProductSelector(true)}
                  sx={{
                    borderColor: '#4caf50',
                    color: '#4caf50',
                    textTransform: 'none',
                    borderStyle: 'dashed',
                    fontSize: 15,
                    fontWeight: 600,
                    px: 2.5,
                    borderWidth: 2,
                    '&:hover': {
                      borderWidth: 2,
                      borderColor: '#45a049',
                      bgcolor: '#f1f8f4'
                    }
                  }}
                >
                  ‚ûï S·∫£n ph·∫©m c√≥ s·∫µn
                </Button>
              </Box>

              <Box sx={{ display: 'flex', gap: 3, mb: 3 }}>
                <Box sx={{
                  width: 80,
                  height: 80,
                  border: '3px dashed #667eea',
                  borderRadius: 2,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  bgcolor: '#f8f9ff',
                  flexShrink: 0,
                  transition: 'all 0.3s ease',
                  '&:hover': {
                    borderColor: '#764ba2',
                    transform: 'scale(1.05)'
                  }
                }}>
                  <Typography sx={{ fontSize: 40 }}>üì¶</Typography>
                </Box>
                <Box sx={{ flex: 1 }}>
                  <TextField
                    fullWidth
                    placeholder="1. Nh·∫≠p t√™n s·∫£n ph·∫©m"
                    value={productData.name}
                    onChange={(e) => setProductData({ ...productData, name: e.target.value })}
                    sx={{
                      mb: 2,
                      '& .MuiOutlinedInput-root': {
                        fontSize: 17,
                        height: 56,
                        bgcolor: '#f8f9ff',
                        '&:hover': { bgcolor: '#f0f2ff' },
                        '&.Mui-focused': {
                          bgcolor: '#fff',
                          '& fieldset': { borderColor: '#667eea', borderWidth: 2 }
                        }
                      }
                    }}
                  />
                  <Grid container spacing={2}>
                    <Grid item xs={6}>
                      <TextField
                        fullWidth
                        label="Kh·ªëi l∆∞·ª£ng (kg)"
                        type="number"
                        value={productData.weight || ''}
                        onChange={(e) => setProductData({ ...productData, weight: parseFloat(e.target.value) || 0 })}
                        inputProps={{ min: 0, step: 0.1 }}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            fontSize: 16,
                            height: 56,
                            bgcolor: '#f8f9ff',
                            '&:hover': { bgcolor: '#f0f2ff' },
                            '&.Mui-focused': {
                              bgcolor: '#fff',
                              '& fieldset': { borderColor: '#667eea', borderWidth: 2 }
                            }
                          },
                          '& .MuiInputLabel-root': { fontSize: 15 }
                        }}
                      />
                    </Grid>
                    <Grid item xs={6}>
                      <TextField
                        fullWidth
                        label="S·ªë l∆∞·ª£ng"
                        type="number"
                        value={productData.quantity}
                        onChange={(e) => setProductData({ ...productData, quantity: parseInt(e.target.value) || 1 })}
                        inputProps={{ min: 1 }}
                        sx={{
                          '& .MuiOutlinedInput-root': {
                            fontSize: 16,
                            height: 56,
                            bgcolor: '#f8f9ff',
                            '&:hover': { bgcolor: '#f0f2ff' },
                            '&.Mui-focused': {
                              bgcolor: '#fff',
                              '& fieldset': { borderColor: '#667eea', borderWidth: 2 }
                            }
                          },
                          '& .MuiInputLabel-root': { fontSize: 15 }
                        }}
                      />
                    </Grid>
                  </Grid>
                </Box>
                <Button
                  sx={{
                    minWidth: 56,
                    width: 56,
                    height: 56,
                    bgcolor: '#4caf50',
                    color: 'white',
                    fontSize: 32,
                    borderRadius: 2,
                    alignSelf: 'flex-start',
                    '&:hover': {
                      bgcolor: '#45a049',
                      transform: 'scale(1.1)'
                    },
                    transition: 'all 0.3s ease'
                  }}
                >
                  +
                </Button>
              </Box>

              <Divider sx={{ my: 2 }} />

              {/* T√≠nh ph√≠ v·∫≠n chuy·ªÉn */}
              <Box sx={{ mb: 2, p: 2, bgcolor: '#f8f9ff', borderRadius: 2, border: '1px solid #e3f2fd' }}>
                <Typography variant="h6" fontWeight="bold" sx={{ mb: 2, color: '#333' }}>
                  üí∞ T√≠nh ph√≠ v·∫≠n chuy·ªÉn
                </Typography>
                <Stack direction="row" spacing={2} alignItems="center">
                  <Button
                    variant="outlined"
                    onClick={calculateShippingFee}
                    disabled={loadingFee || !receiverData.provinceId || !receiverData.districtName || !productData.weight}
                    startIcon={loadingFee ? <CircularProgress size={20} /> : <LocalShipping />}
                    sx={{ 
                      borderColor: '#667eea',
                      color: '#667eea',
                      '&:hover': { borderColor: '#5a6fd8', bgcolor: '#f0f2ff' }
                    }}
                  >
                    {loadingFee ? 'ƒêang t√≠nh...' : 'T√≠nh ph√≠ v·∫≠n chuy·ªÉn'}
                  </Button>
                  
                  {feeEstimate && (
                    <Box sx={{ ml: 2 }}>
                      <Typography variant="body2" color="text.secondary">
                        Ph√≠ v·∫≠n chuy·ªÉn: <strong style={{ color: '#4caf50' }}>{feeEstimate.fee?.toLocaleString()} VNƒê</strong>
                      </Typography>
                      {feeEstimate.insurance_fee > 0 && (
                        <Typography variant="body2" color="text.secondary">
                          Ph√≠ khai gi√°: <strong>{feeEstimate.insurance_fee?.toLocaleString()} VNƒê</strong>
                        </Typography>
                      )}
                      <Typography variant="caption" color="text.secondary">
                        G√≥i c∆∞·ªõc: {feeEstimate.name} | Giao h√†ng: {feeEstimate.delivery ? '‚úÖ H·ªó tr·ª£' : '‚ùå Kh√¥ng h·ªó tr·ª£'}
                      </Typography>
                    </Box>
                  )}
                </Stack>
              </Box>

              {/* Summary Grid */}
              <Box sx={{ bgcolor: '#fafafa', p: 2, borderRadius: 1, mb: 2 }}>
                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <Typography variant="caption" sx={{ color: '#666', display: 'block', mb: 0.5 }}>
                      T·ªïng KL
                    </Typography>
                    <Typography variant="body2" fontWeight={600} sx={{ fontSize: 14 }}>
                      {totalWeight.toFixed(2)} kg
                    </Typography>
                  </Grid>
                  <Grid item xs={6}>
                    <Typography variant="caption" sx={{ color: '#666', display: 'block', mb: 0.5 }}>
                      KL t√≠nh c∆∞·ªõc
                    </Typography>
                    <Typography variant="body2" fontWeight={600} sx={{ fontSize: 14 }}>
                      {totalWeight.toFixed(2)} kg
                    </Typography>
                  </Grid>
                  <Grid item xs={6}>
                    <Typography variant="caption" sx={{ color: '#666', display: 'block', mb: 0.5 }}>
                      Ti·ªÅn thu h·ªô
                    </Typography>
                    <TextField
                      size="small"
                      type="number"
                      value={productData.codAmount}
                      onChange={(e) => setProductData({ ...productData, codAmount: parseInt(e.target.value) || 0 })}
                      inputProps={{ min: 0 }}
                      InputProps={{ sx: { fontSize: 14 } }}
                      sx={{ '& .MuiOutlinedInput-root': { height: 36 } }}
                    />
                  </Grid>
                  <Grid item xs={6}>
                    <Typography variant="caption" sx={{ color: '#666', display: 'block', mb: 0.5 }}>
                      Gi√° tr·ªã h√†ng
                    </Typography>
                    <TextField
                      size="small"
                      type="number"
                      value={productData.productValue}
                      onChange={(e) => setProductData({ ...productData, productValue: parseInt(e.target.value) || 0 })}
                      inputProps={{ min: 0 }}
                      InputProps={{ sx: { fontSize: 14 } }}
                      sx={{ '& .MuiOutlinedInput-root': { height: 36 } }}
                    />
                  </Grid>
                  <Grid item xs={6}>
                    <Typography variant="caption" sx={{ color: '#666', display: 'block', mb: 0.5 }}>
                      Ph√≠ ship
                    </Typography>
                    <Typography variant="body2" fontWeight={600} sx={{ fontSize: 14, color: feeEstimate ? '#1976d2' : '#999' }}>
                      {feeEstimate?.fee ? `${feeEstimate.fee.toLocaleString()}ƒë` : '0ƒë'}
                    </Typography>
                    <Button size="small" sx={{ textTransform: 'none', p: 0, minWidth: 0, fontSize: 12, color: '#1976d2' }}>
                      Kh√°ch tr·∫£ ship
                    </Button>
                  </Grid>
                  <Grid item xs={6}>
                    <Box sx={{ bgcolor: '#fff3cd', p: 1.5, borderRadius: 1, border: '1px solid #ffe082' }}>
                      <Typography variant="caption" sx={{ color: '#666', display: 'block', mb: 0.5 }}>
                        T·ªïng ti·ªÅn
                      </Typography>
                      <Typography variant="h6" fontWeight={700} sx={{ fontSize: 18, color: '#f57c00' }}>
                        {totalAmount.toLocaleString()}ƒë
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
              </Box>

              <TextField
                fullWidth
                size="small"
                placeholder="Nh·∫≠p m√£ ƒë∆°n h√†ng ri√™ng c·ªßa shop"
                label="M√£ ƒêH ri√™ng"
                InputProps={{ sx: { fontSize: 14 } }}
                InputLabelProps={{ sx: { fontSize: 14 } }}
              />
            </Paper>

          </Grid>
        </Grid>

        {/* CH√çNH S√ÅCH GIAO H√ÄNG */}
        <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 20px rgba(0,0,0,0.1)' }}>
          <Typography variant="h6" fontWeight="bold" sx={{ mb: 2, color: '#333' }}>
            üöö Ch√≠nh s√°ch giao h√†ng
          </Typography>
          
          <FormControlLabel
            control={
              <Checkbox
                checked={deliveryPolicy.saveForNext}
                onChange={(e) => setDeliveryPolicy({ ...deliveryPolicy, saveForNext: e.target.checked })}
              />
            }
            label="L∆∞u cho c√°c l·∫ßn ƒëƒÉng ƒë∆°n ti·∫øp theo"
            sx={{ mb: 2 }}
          />

          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    Xem h√†ng <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />
                  </Typography>
                  <Typography variant="caption" color="text.secondary">Mi·ªÖn ph√≠</Typography>
                </Box>
                <Switch
                  checked={deliveryPolicy.viewGoods}
                  onChange={(e) => setDeliveryPolicy({ ...deliveryPolicy, viewGoods: e.target.checked })}
                  color="success"
                />
              </Box>
            </Grid>

            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    G·ªçi shop khi kh√¥ng giao ƒë∆∞·ª£c <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />
                  </Typography>
                  <Typography variant="caption" color="text.secondary">Mi·ªÖn ph√≠</Typography>
                </Box>
                <Switch
                  checked={deliveryPolicy.callShopWhenFail}
                  onChange={(e) => setDeliveryPolicy({ ...deliveryPolicy, callShopWhenFail: e.target.checked })}
                  color="success"
                />
              </Box>
            </Grid>

            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    Giao h√†ng 1 ph·∫ßn ch·ªçn SP <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />
                  </Typography>
                  <Typography variant="caption" color="text.secondary">Ph√≠ ho√†n</Typography>
                </Box>
                <Switch
                  checked={deliveryPolicy.partialDeliverySelect}
                  onChange={(e) => setDeliveryPolicy({ ...deliveryPolicy, partialDeliverySelect: e.target.checked })}
                  color="success"
                />
              </Box>
            </Grid>

            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    Giao h√†ng 1 ph·∫ßn ƒë·ªïi tr·∫£ h√†ng <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />
                  </Typography>
                  <Typography variant="caption" color="text.secondary">Ph√≠ ho√†n</Typography>
                </Box>
                <Switch
                  checked={deliveryPolicy.partialDeliveryExchange}
                  onChange={(e) => setDeliveryPolicy({ ...deliveryPolicy, partialDeliveryExchange: e.target.checked })}
                  color="success"
                />
              </Box>
            </Grid>

            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    S·∫£n ph·∫©m thu h·ªìi
                  </Typography>
                </Box>
                <Button variant="outlined" size="small" endIcon={<ArrowForwardIosIcon />}>
                  Ch·ªçn s·∫£n ph·∫©m
                </Button>
              </Box>
            </Grid>

            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    Kh√¥ng giao ƒë∆∞·ª£c thu ph√≠ <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />
                  </Typography>
                  <Typography variant="caption" color="text.secondary">Ph√≠ ho√†n</Typography>
                </Box>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <TextField
                    size="small"
                    value={deliveryPolicy.undeliverableFee}
                    onChange={(e) => setDeliveryPolicy({ ...deliveryPolicy, undeliverableFee: parseInt(e.target.value) || 0 })}
                    sx={{ width: 80 }}
                    InputProps={{
                      endAdornment: <Typography variant="caption">ƒë</Typography>
                    }}
                  />
                  <Switch
                    checked={deliveryPolicy.chargeWhenUndeliverable}
                    onChange={(e) => setDeliveryPolicy({ ...deliveryPolicy, chargeWhenUndeliverable: e.target.checked })}
                    color="success"
                  />
                </Box>
              </Box>
            </Grid>
          </Grid>
        </Paper>

        {/* CH√çNH S√ÅCH HO√ÄN H√ÄNG */}
        <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 20px rgba(0,0,0,0.1)' }}>
          <Typography variant="h6" fontWeight="bold" sx={{ mb: 2, color: '#333' }}>
            üîÑ Ch√≠nh s√°ch ho√†n h√†ng
          </Typography>
          
          <FormControlLabel
            control={
              <Checkbox
                checked={returnPolicy.saveForNext}
                onChange={(e) => setReturnPolicy({ ...returnPolicy, saveForNext: e.target.checked })}
              />
            }
            label="L∆∞u cho c√°c l·∫ßn ƒëƒÉng ƒë∆°n ti·∫øp theo"
            sx={{ mb: 2 }}
          />

          <Grid container spacing={2}>
            {[
              { key: 'sameDayReturn', label: 'Ho√†n ngay trong ng√†y v·ªõi ƒë∆°n XFAST N·ªëi ƒëi·ªÉm', icon: true },
              { key: 'autoStoreCheck', label: 'T·ª± ƒë·ªông l∆∞u kho ch·ªù check', icon: true },
              { key: 'noStoreReturn', label: 'Kh√¥ng l∆∞u kho/Ho√†n ngay', icon: true },
              { key: 'noAcceptReturn', label: 'Kh√¥ng nh·∫≠n h√†ng tr·∫£', icon: true },
              { key: 'callShopBeforeReturn', label: 'G·ªçi shop tr∆∞·ªõc khi tr·∫£ h√†ng', icon: true },
              { key: 'returnConfirmation', label: 'Bi√™n b·∫£n x√°c nh·∫≠n tr·∫£ h√†ng', icon: true },
              { key: 'returnAtPostOffice', label: 'Nh·∫≠n h√†ng tr·∫£ t·∫°i b∆∞u c·ª•c', icon: true },
              { key: 'needShopConfirmation', label: 'ƒê√£ tr·∫£ c·∫ßn shop x√°c nh·∫≠n', icon: true }
            ].map((item) => (
              <Grid item xs={12} md={6} key={item.key}>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                  <Box>
                    <Typography variant="body2" fontWeight={600}>
                      {item.label} {item.icon && <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />}
                    </Typography>
                    <Typography variant="caption" color="text.secondary">Mi·ªÖn ph√≠</Typography>
                  </Box>
                  <Switch
                    checked={returnPolicy[item.key as keyof typeof returnPolicy] as boolean}
                    onChange={(e) => setReturnPolicy({ ...returnPolicy, [item.key]: e.target.checked })}
                    color="success"
                  />
                </Box>
              </Grid>
            ))}
          </Grid>

          <Box sx={{ mt: 2, p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>
            <Typography variant="body2" color="text.secondary">
              Tr·∫£ h√†ng t·∫°i: {returnPolicy.returnAddress}
            </Typography>
          </Box>
        </Paper>

        {/* CH√çNH S√ÅCH L·∫§Y H√ÄNG */}
        <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: '0 4px 20px rgba(0,0,0,0.1)' }}>
          <Typography variant="h6" fontWeight="bold" sx={{ mb: 2, color: '#333' }}>
            üì¶ Ch√≠nh s√°ch l·∫•y h√†ng
          </Typography>
          
          <FormControlLabel
            control={
              <Checkbox
                checked={pickupPolicy.saveForNext}
                onChange={(e) => setPickupPolicy({ ...pickupPolicy, saveForNext: e.target.checked })}
              />
            }
            label="L∆∞u cho c√°c l·∫ßn ƒëƒÉng ƒë∆°n ti·∫øp theo"
            sx={{ mb: 2 }}
          />

          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    G·ªçi shop tr∆∞·ªõc khi l·∫•y h√†ng <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />
                  </Typography>
                  <Typography variant="caption" color="text.secondary">Mi·ªÖn ph√≠</Typography>
                </Box>
                <Switch
                  checked={pickupPolicy.callShopBeforePickup}
                  onChange={(e) => setPickupPolicy({ ...pickupPolicy, callShopBeforePickup: e.target.checked })}
                  color="success"
                />
              </Box>
            </Grid>

            <Grid item xs={12} md={6}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', p: 1 }}>
                <Box>
                  <Typography variant="body2" fontWeight={600}>
                    ƒê·ªìng ki·ªÉm khi l·∫•y h√†ng <InfoIcon sx={{ fontSize: 16, color: '#4caf50', ml: 0.5 }} />
                  </Typography>
                  <Typography variant="caption" color="text.secondary">Mi·ªÖn ph√≠</Typography>
                </Box>
                <Switch
                  checked={pickupPolicy.coCheckPickup}
                  onChange={(e) => setPickupPolicy({ ...pickupPolicy, coCheckPickup: e.target.checked })}
                  color="success"
                />
              </Box>
            </Grid>
          </Grid>

          <Box sx={{ mt: 2, p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>
            <Typography variant="body2" color="text.secondary">
              L·∫•y h√†ng t·∫≠n n∆°i t·∫°i: {pickupPolicy.pickupAddress}
            </Typography>
          </Box>
        </Paper>

        {/* BOTTOM BUTTONS */}
        <Box sx={{
          display: 'flex',
          gap: 3,
          mt: 4,
          p: 3,
          bgcolor: 'rgba(255,255,255,0.95)',
          borderRadius: 3,
          boxShadow: '0 8px 32px rgba(0,0,0,0.1)'
        }}>
          <Button
            variant="outlined"
            size="large"
            sx={{
              textTransform: 'none',
              fontSize: 17,
              fontWeight: 600,
              borderColor: '#667eea',
              color: '#667eea',
              px: 4,
              py: 1.5,
              borderWidth: 2,
              '&:hover': {
                borderWidth: 2,
                borderColor: '#764ba2',
                bgcolor: 'rgba(102, 126, 234, 0.05)',
                transform: 'translateY(-2px)',
                boxShadow: '0 4px 12px rgba(102, 126, 234, 0.2)'
              },
              transition: 'all 0.3s ease'
            }}
            startIcon={<span style={{ fontSize: 20 }}>‚ûï</span>}
          >
            Th√™m ƒêH m·ªõi
          </Button>
          <Button
            variant="outlined"
            size="large"
            sx={{
              textTransform: 'none',
              fontSize: 17,
              fontWeight: 600,
              borderColor: '#ffa726',
              color: '#ffa726',
              px: 4,
              py: 1.5,
              borderWidth: 2,
              '&:hover': {
                borderWidth: 2,
                borderColor: '#fb8c00',
                bgcolor: 'rgba(255, 167, 38, 0.05)',
                transform: 'translateY(-2px)',
                boxShadow: '0 4px 12px rgba(255, 167, 38, 0.2)'
              },
              transition: 'all 0.3s ease'
            }}
            startIcon={<span style={{ fontSize: 20 }}>üíæ</span>}
          >
            L∆∞u nh√°p
          </Button>
          <Button
            variant="contained"
            size="large"
            sx={{
              background: 'linear-gradient(135deg, #00c853 0%, #00e676 100%)',
              textTransform: 'none',
              fontSize: 18,
              fontWeight: 700,
              px: 6,
              py: 1.5,
              boxShadow: '0 4px 20px rgba(0, 200, 83, 0.4)',
              '&:hover': {
                background: 'linear-gradient(135deg, #00a844 0%, #00c853 100%)',
                transform: 'translateY(-2px)',
                boxShadow: '0 6px 28px rgba(0, 200, 83, 0.5)'
              },
              '&:disabled': {
                background: '#e0e0e0',
                color: '#999',
                boxShadow: 'none'
              },
              transition: 'all 0.3s ease'
            }}
            disabled={!isFormValid() || createOrderMutation.isPending}
            onClick={() => createOrderMutation.mutate()}
            startIcon={createOrderMutation.isPending ? <CircularProgress size={24} color="inherit" /> : <span style={{ fontSize: 22 }}>‚úì</span>}
          >
            {createOrderMutation.isPending ? 'ƒêang t·∫°o ƒë∆°n...' : 'üöÄ ƒêƒÉng ƒë∆°n ngay'}
          </Button>
        </Box>

        {/* ERROR */}
        {createOrderMutation.error && (
          <Alert severity="error" sx={{ mt: 2 }}>
            {(createOrderMutation.error as any)?.response?.data?.error || 'C√≥ l·ªói x·∫£y ra'}
          </Alert>
        )}

        {/* Customer Details Drawer */}
        <CustomerDetailsDrawer
          open={openCustomerDrawer}
          onClose={() => setOpenCustomerDrawer(false)}
          customer={drawerCustomer}
        />

        {/* Product Selector Dialog */}
        <Dialog
          open={openProductSelector}
          onClose={() => setOpenProductSelector(false)}
          maxWidth="md"
          fullWidth
          PaperProps={{
            sx: {
              borderRadius: 3,
              boxShadow: '0 20px 40px rgba(0,0,0,0.15)'
            }
          }}
        >
          <DialogTitle sx={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            color: 'white',
            py: 3,
            display: 'flex',
            alignItems: 'center',
            gap: 2
          }}>
            <Box sx={{ fontSize: 32 }}>üì¶</Box>
            <Box>
              <Typography variant="h5" fontWeight="bold">
                Ch·ªçn s·∫£n ph·∫©m c√≥ s·∫µn
              </Typography>
              <Typography variant="body2" sx={{ opacity: 0.9 }}>
                Ch·ªçn s·∫£n ph·∫©m t·ª´ danh s√°ch ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin
              </Typography>
            </Box>
          </DialogTitle>

          <DialogContent sx={{ p: 3 }}>
            {/* Search Box */}
            <TextField
              fullWidth
              placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
              value={productSearch}
              onChange={(e) => setProductSearch(e.target.value)}
              sx={{ mb: 3 }}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Box sx={{ fontSize: 20 }}>üîç</Box>
                  </InputAdornment>
                ),
              }}
            />

            {/* Product List */}
            {loadingProducts ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                <CircularProgress />
              </Box>
            ) : products.length === 0 ? (
              <Alert severity="info" sx={{ borderRadius: 2 }}>
                Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o. Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o h·ªá th·ªëng tr∆∞·ªõc.
              </Alert>
            ) : (
              <List sx={{ maxHeight: 400, overflow: 'auto' }}>
                {products
                  .filter((product) => {
                    const searchLower = productSearch.toLowerCase();
                    return (
                      product.name?.toLowerCase().includes(searchLower) ||
                      product.product_name?.toLowerCase().includes(searchLower) ||
                      product.sku?.toLowerCase().includes(searchLower)
                    );
                  })
                  .map((product) => (
                    <ListItem key={product.id} disablePadding sx={{ mb: 1 }}>
                      <ListItemButton
                        onClick={() => handleSelectProduct(product)}
                        sx={{
                          borderRadius: 2,
                          border: '1px solid #e0e0e0',
                          '&:hover': {
                            bgcolor: '#f5f5f5',
                            borderColor: '#667eea',
                            transform: 'translateX(4px)',
                            transition: 'all 0.2s'
                          }
                        }}
                      >
                        <ListItemAvatar>
                          <Avatar
                            sx={{
                              bgcolor: '#667eea',
                              width: 56,
                              height: 56
                            }}
                          >
                            <Box sx={{ fontSize: 24 }}>üì¶</Box>
                          </Avatar>
                        </ListItemAvatar>
                        <ListItemText
                          primary={
                            <Typography variant="subtitle1" fontWeight={600}>
                              {product.name || product.product_name}
                            </Typography>
                          }
                          secondary={
                            <Box sx={{ mt: 0.5 }}>
                              <Typography variant="body2" color="text.secondary">
                                SKU: {product.sku || 'N/A'} | Gi√°: {product.price?.toLocaleString() || '0'} VNƒê
                              </Typography>
                              {product.weight && (
                                <Chip
                                  label={`‚öñÔ∏è ${product.weight} kg`}
                                  size="small"
                                  sx={{ mt: 0.5 }}
                                />
                              )}
                            </Box>
                          }
                        />
                      </ListItemButton>
                    </ListItem>
                  ))}
              </List>
            )}
          </DialogContent>

          <DialogActions sx={{ p: 3, borderTop: '1px solid #e0e0e0' }}>
            <Button
              onClick={() => setOpenProductSelector(false)}
              variant="outlined"
              sx={{
                borderRadius: 2,
                textTransform: 'none',
                fontWeight: 600,
                px: 3
              }}
            >
              ƒê√≥ng
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </Box>
  );
};

export default GHTKOrderCreate;
