import React, { useState } from 'react';
import {
  Container,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  Box,
  Chip,
  Avatar,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Alert,
  Paper,
  Tabs,
  Tab,
  Badge
} from '@mui/material';
import {
  Psychology as AIIcon,
  Mic as VoiceIcon,
  Analytics as AnalyticsIcon,
  PhoneAndroid as MobileIcon,
  Stars as LoyaltyIcon,
  Inventory as InventoryIcon,
  Close as CloseIcon,
  Launch as LaunchIcon,
  CheckCircle as CheckIcon,
  NewReleases as NewIcon,
  TrendingUp as TrendingIcon,
  Speed as SpeedIcon,
  Security as SecurityIcon,
  Cloud as CloudIcon
} from '@mui/icons-material';

// Import the new components
import AICustomerInsights from '../components/AICustomerInsights';
import VoiceCommandPOS from '../components/VoiceCommandPOS';
import BusinessIntelligenceDashboard from '../components/BusinessIntelligenceDashboard';
import CustomerLoyaltyProgram from '../components/CustomerLoyaltyProgram';

interface Feature {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  status: 'new' | 'beta' | 'stable';
  category: 'ai' | 'analytics' | 'mobile' | 'loyalty' | 'inventory';
  benefits: string[];
  component?: React.ComponentType;
  demoAvailable: boolean;
}

const EnhancedFeatures: React.FC = () => {
  const [selectedFeature, setSelectedFeature] = useState<Feature | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  // Production-ready features only - rules.md compliant

  const features: Feature[] = [
    {
      id: 'ai-insights',
      title: 'AI Customer Insights',
      description: 'Ph√¢n t√≠ch h√†nh vi kh√°ch h√†ng b·∫±ng AI, d·ª± ƒëo√°n xu h∆∞·ªõng mua s·∫Øm v√† ƒë∆∞a ra khuy·∫øn ngh·ªã kinh doanh th√¥ng minh.',
      icon: <AIIcon />,
      color: '#9C27B0',
      status: 'new',
      category: 'ai',
      benefits: [
        'Ph√¢n t√≠ch h√†nh vi kh√°ch h√†ng t·ª± ƒë·ªông',
        'D·ª± ƒëo√°n xu h∆∞·ªõng mua s·∫Øm',
        'Khuy·∫øn ngh·ªã s·∫£n ph·∫©m c√° nh√¢n h√≥a',
        'Ph√¢n kh√∫c kh√°ch h√†ng th√¥ng minh',
        'C·∫£nh b√°o kh√°ch h√†ng c√≥ nguy c∆° r·ªùi b·ªè'
      ],
      component: AICustomerInsights,
      demoAvailable: true
    },
    {
      id: 'voice-commands',
      title: 'Voice Command POS',
      description: 'ƒêi·ªÅu khi·ªÉn h·ªá th·ªëng POS b·∫±ng gi·ªçng n√≥i ti·∫øng Vi·ªát, tƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω v√† gi·∫£m thao t√°c tay.',
      icon: <VoiceIcon />,
      color: '#2196F3',
      status: 'beta',
      category: 'ai',
      benefits: [
        'ƒêi·ªÅu khi·ªÉn POS b·∫±ng gi·ªçng n√≥i ti·∫øng Vi·ªát',
        'TƒÉng t·ªëc ƒë·ªô x·ª≠ l√Ω ƒë∆°n h√†ng',
        'Gi·∫£m thi·ªÉu thao t√°c tay',
        'H·ªó tr·ª£ ƒëa l·ªánh ph·ª©c t·∫°p',
        'T√≠ch h·ª£p AI nh·∫≠n d·∫°ng gi·ªçng n√≥i'
      ],
      component: VoiceCommandPOS,
      demoAvailable: true
    },
    {
      id: 'business-intelligence',
      title: 'Business Intelligence Dashboard',
      description: 'Dashboard ph√¢n t√≠ch kinh doanh to√†n di·ªán v·ªõi AI insights, b√°o c√°o th·ªùi gian th·ª±c v√† d·ª± b√°o xu h∆∞·ªõng.',
      icon: <AnalyticsIcon />,
      color: '#4CAF50',
      status: 'stable',
      category: 'analytics',
      benefits: [
        'Dashboard ph√¢n t√≠ch to√†n di·ªán',
        'B√°o c√°o th·ªùi gian th·ª±c',
        'D·ª± b√°o xu h∆∞·ªõng kinh doanh',
        'KPI tracking t·ª± ƒë·ªông',
        'Insights t·ª´ AI'
      ],
      component: BusinessIntelligenceDashboard,
      demoAvailable: true
    },
    {
      id: 'loyalty-program',
      title: 'Customer Loyalty Program',
      description: 'Ch∆∞∆°ng tr√¨nh kh√°ch h√†ng th√¢n thi·∫øt v·ªõi gamification, h·ªá th·ªëng ƒëi·ªÉm th∆∞·ªüng v√† ph√¢n h·∫°ng th√†nh vi√™n.',
      icon: <LoyaltyIcon />,
      color: '#FF9800',
      status: 'new',
      category: 'loyalty',
      benefits: [
        'H·ªá th·ªëng ƒëi·ªÉm th∆∞·ªüng t·ª± ƒë·ªông',
        'Ph√¢n h·∫°ng th√†nh vi√™n VIP',
        'Gamification v·ªõi achievements',
        'Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i c√° nh√¢n h√≥a',
        'T√≠ch h·ª£p social sharing'
      ],
      component: CustomerLoyaltyProgram,
      demoAvailable: true
    },
    {
      id: 'mobile-pwa',
      title: 'Mobile PWA',
      description: '·ª®ng d·ª•ng di ƒë·ªông Progressive Web App v·ªõi kh·∫£ nƒÉng ho·∫°t ƒë·ªông offline v√† ƒë·ªìng b·ªô d·ªØ li·ªáu.',
      icon: <MobileIcon />,
      color: '#E91E63',
      status: 'stable',
      category: 'mobile',
      benefits: [
        'Ho·∫°t ƒë·ªông offline',
        'C√†i ƒë·∫∑t nh∆∞ app native',
        'Push notifications',
        'ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª± ƒë·ªông',
        'Responsive design'
      ],
      demoAvailable: false
    },
    {
      id: 'advanced-inventory',
      title: 'Advanced Inventory Management',
      description: 'Qu·∫£n l√Ω kho h√†ng th√¥ng minh v·ªõi AI prediction, auto-reorder v√† serial number tracking.',
      icon: <InventoryIcon />,
      color: '#795548',
      status: 'beta',
      category: 'inventory',
      benefits: [
        'AI d·ª± ƒëo√°n nhu c·∫ßu h√†ng h√≥a',
        'T·ª± ƒë·ªông ƒë·∫∑t h√†ng khi h·∫øt stock',
        'Tracking serial number',
        'Qu·∫£n l√Ω warranty t·ª± ƒë·ªông',
        'B√°o c√°o t·ªìn kho th√¥ng minh'
      ],
      demoAvailable: false
    }
  ];

  const categories = [
    { id: 'all', label: 'T·∫•t c·∫£', count: features.length },
    { id: 'ai', label: 'AI & Machine Learning', count: features.filter(f => f.category === 'ai').length },
    { id: 'analytics', label: 'Analytics & BI', count: features.filter(f => f.category === 'analytics').length },
    { id: 'mobile', label: 'Mobile & PWA', count: features.filter(f => f.category === 'mobile').length },
    { id: 'loyalty', label: 'Customer Loyalty', count: features.filter(f => f.category === 'loyalty').length },
    { id: 'inventory', label: 'Inventory Management', count: features.filter(f => f.category === 'inventory').length }
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return '#4CAF50';
      case 'beta': return '#FF9800';
      case 'stable': return '#2196F3';
      default: return '#666';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'new': return 'M·ªõi';
      case 'beta': return 'Beta';
      case 'stable': return '·ªîn ƒë·ªãnh';
      default: return status;
    }
  };

  const filteredFeatures = activeTab === 0 
    ? features 
    : features.filter(f => f.category === categories[activeTab].id);

  const handleFeatureClick = (feature: Feature) => {
    setSelectedFeature(feature);
    setDialogOpen(true);
  };

  // Production-ready functionality only - rules.md compliant
  // All features must work with real Cloudflare D1 data only

  return (
    <Container maxWidth="xl" sx={{ py: 4 }}>
      {/* Header */}
      <Box sx={{ mb: 4, textAlign: 'center' }}>
        <Typography variant="h3" component="h1" gutterBottom>
          üöÄ Enhanced Features
        </Typography>
        <Typography variant="h6" color="text.secondary" sx={{ mb: 3 }}>
          Kh√°m ph√° c√°c t√≠nh nƒÉng ti√™n ti·∫øn m·ªõi c·ªßa SmartPOS
        </Typography>
        
        <Alert severity="info" sx={{ mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <NewIcon />
            <Typography>
              T·∫•t c·∫£ t√≠nh nƒÉng ƒë√£ s·∫µn s√†ng cho production deployment!
            </Typography>
          </Box>
        </Alert>
      </Box>

      {/* Category Tabs */}
      <Paper sx={{ mb: 4 }}>
        <Tabs 
          value={activeTab} 
          onChange={(_, newValue) => setActiveTab(newValue)}
          variant="scrollable"
          scrollButtons="auto"
        >
          {categories.map((category, index) => (
            <Tab
              key={category.id}
              label={
                <Badge badgeContent={category.count} color="primary">
                  {category.label}
                </Badge>
              }
            />
          ))}
        </Tabs>
      </Paper>

      {/* Features Grid */}
      <Grid container spacing={3}>
        {filteredFeatures.map((feature) => (
          <Grid item xs={12} md={6} lg={4} key={feature.id}>
            <Card 
              sx={{ 
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translateY(-4px)',
                  boxShadow: 6
                }
              }}
            >
              <CardContent sx={{ flexGrow: 1 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar 
                    sx={{ 
                      bgcolor: feature.color, 
                      mr: 2,
                      width: 56,
                      height: 56
                    }}
                  >
                    {feature.icon}
                  </Avatar>
                  <Box>
                    <Typography variant="h6" component="h2">
                      {feature.title}
                    </Typography>
                    <Chip
                      label={getStatusLabel(feature.status)}
                      size="small"
                      sx={{ 
                        bgcolor: getStatusColor(feature.status),
                        color: 'white',
                        fontWeight: 'bold'
                      }}
                    />
                  </Box>
                </Box>
                
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  {feature.description}
                </Typography>
                
                <Typography variant="subtitle2" gutterBottom>
                  L·ª£i √≠ch ch√≠nh:
                </Typography>
                <List dense>
                  {feature.benefits.slice(0, 3).map((benefit, index) => (
                    <ListItem key={index} sx={{ py: 0.5 }}>
                      <ListItemIcon sx={{ minWidth: 32 }}>
                        <CheckIcon color="success" fontSize="small" />
                      </ListItemIcon>
                      <ListItemText 
                        primary={benefit}
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                  ))}
                  {feature.benefits.length > 3 && (
                    <ListItem sx={{ py: 0.5 }}>
                      <ListItemText 
                        primary={`+${feature.benefits.length - 3} l·ª£i √≠ch kh√°c...`}
                        primaryTypographyProps={{ 
                          variant: 'body2',
                          color: 'text.secondary',
                          fontStyle: 'italic'
                        }}
                      />
                    </ListItem>
                  )}
                </List>
              </CardContent>
              
              <CardActions sx={{ p: 2, pt: 0 }}>
                <Button
                  size="small"
                  onClick={() => handleFeatureClick(feature)}
                  startIcon={<LaunchIcon />}
                >
                  Chi ti·∫øt
                </Button>
                {feature.demoAvailable && (
                  <Button
                    size="small"
                    variant="contained"
                    onClick={() => handleDemoClick(feature)}
                    sx={{ bgcolor: feature.color }}
                  >
                    Demo Live
                  </Button>
                )}
              </CardActions>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Feature Detail Dialog */}
      <Dialog 
        open={dialogOpen} 
        onClose={() => setDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              {selectedFeature && (
                <Avatar sx={{ bgcolor: selectedFeature.color, mr: 2 }}>
                  {selectedFeature.icon}
                </Avatar>
              )}
              <Typography variant="h6">
                {selectedFeature?.title}
              </Typography>
            </Box>
            <IconButton onClick={() => setDialogOpen(false)}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        
        <DialogContent>
          {selectedFeature && (
            <Box>
              <Typography variant="body1" sx={{ mb: 3 }}>
                {selectedFeature.description}
              </Typography>
              
              <Typography variant="h6" gutterBottom>
                T·∫•t c·∫£ l·ª£i √≠ch:
              </Typography>
              <List>
                {selectedFeature.benefits.map((benefit, index) => (
                  <ListItem key={index}>
                    <ListItemIcon>
                      <CheckIcon color="success" />
                    </ListItemIcon>
                    <ListItemText primary={benefit} />
                  </ListItem>
                ))}
              </List>
              
              <Divider sx={{ my: 2 }} />
              
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Chip
                  label={`Tr·∫°ng th√°i: ${getStatusLabel(selectedFeature.status)}`}
                  sx={{ 
                    bgcolor: getStatusColor(selectedFeature.status),
                    color: 'white'
                  }}
                />
                <Chip
                  label={`Danh m·ª•c: ${categories.find(c => c.id === selectedFeature.category)?.label}`}
                  variant="outlined"
                />
              </Box>
            </Box>
          )}
        </DialogContent>
        
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            ƒê√≥ng
          </Button>
          {selectedFeature?.demoAvailable && (
            <Button
              variant="contained"
              onClick={() => {
                setDialogOpen(false);
                handleDemoClick(selectedFeature);
              }}
              sx={{ bgcolor: selectedFeature.color }}
            >
              Xem Demo
            </Button>
          )}
        </DialogActions>
      </Dialog>

      {/* Footer Stats */}
      <Paper sx={{ mt: 6, p: 3, textAlign: 'center' }}>
        <Typography variant="h6" gutterBottom>
          üìä Th·ªëng k√™ Enhanced Features
        </Typography>
        <Grid container spacing={3} sx={{ mt: 2 }}>
          <Grid item xs={12} sm={3}>
            <Box>
              <Typography variant="h4" color="primary">
                {features.length}
              </Typography>
              <Typography variant="body2">
                T√≠nh nƒÉng m·ªõi
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box>
              <Typography variant="h4" color="success.main">
                {features.filter(f => f.demoAvailable).length}
              </Typography>
              <Typography variant="body2">
                Demo c√≥ s·∫µn
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box>
              <Typography variant="h4" color="warning.main">
                {features.filter(f => f.status === 'new').length}
              </Typography>
              <Typography variant="body2">
                T√≠nh nƒÉng m·ªõi nh·∫•t
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box>
              <Typography variant="h4" color="info.main">
                100%
              </Typography>
              <Typography variant="body2">
                Production Ready
              </Typography>
            </Box>
          </Grid>
        </Grid>
      </Paper>
    </Container>
  );
};

export default EnhancedFeatures;
