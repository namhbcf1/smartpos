import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { Users, UserCheck, Building2, Truck, Store, Plus, TrendingUp, DollarSign, Package, MapPin, Phone, Mail, Eye, Edit, Trash2, Search, Filter } from 'lucide-react'
import { Button } from '../../components/ui/button'
import { Input } from '../../components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card'
import { Badge } from '../../components/ui/badge'
import { useNavigate } from 'react-router-dom'

interface Partner {
  id: string
  name: string
  type: 'customer' | 'supplier' | 'distributor' | 'agent'
  code: string
  contactPerson: string
  phone: string
  email: string
  region: string
  status: 'active' | 'inactive'
  totalOrders: number
  totalRevenue: number
  lastOrderDate: string
  createdAt: string
}

const mockPartners: Partner[] = [
  {
    id: '1',
    name: 'C√¥ng ty ABC Ltd',
    type: 'customer',
    code: 'KH-001',
    contactPerson: 'Nguy·ªÖn VƒÉn A',
    phone: '0123456789',
    email: 'contact@abc.com',
    region: 'H√† N·ªôi',
    status: 'active',
    totalOrders: 25,
    totalRevenue: 150000000,
    lastOrderDate: '2024-01-15',
    createdAt: '2023-06-01'
  },
  {
    id: '2',
    name: 'Nh√† cung c·∫•p XYZ',
    type: 'supplier',
    code: 'NCC-001',
    contactPerson: 'Tr·∫ßn Th·ªã B',
    phone: '0987654321',
    email: 'supplier@xyz.com',
    region: 'TP.HCM',
    status: 'active',
    totalOrders: 45,
    totalRevenue: 2500000000,
    lastOrderDate: '2024-01-20',
    createdAt: '2023-05-15'
  },
  {
    id: '3',
    name: 'NPP Mi·ªÅn B·∫Øc',
    type: 'distributor',
    code: 'NPP-MB-001',
    contactPerson: 'L√™ VƒÉn C',
    phone: '0369852147',
    email: 'npp.mb@example.com',
    region: 'Mi·ªÅn B·∫Øc',
    status: 'active',
    totalOrders: 150,
    totalRevenue: 2500000000,
    lastOrderDate: '2024-01-18',
    createdAt: '2024-01-15'
  },
  {
    id: '4',
    name: 'ƒê·∫°i l√Ω H√† N·ªôi',
    type: 'agent',
    code: 'DL-HN-001',
    contactPerson: 'Ph·∫°m Th·ªã D',
    phone: '0521478963',
    email: 'dl.hn@example.com',
    region: 'H√† N·ªôi',
    status: 'active',
    totalOrders: 85,
    totalRevenue: 1200000000,
    lastOrderDate: '2024-01-22',
    createdAt: '2024-01-10'
  }
]

const getPartnerTypeInfo = (type: string) => {
  const types = {
    customer: { label: 'Kh√°ch h√†ng', icon: UserCheck, color: 'blue', badge: 'L·∫ª/S·ªâ/DN' },
    supplier: { label: 'Nh√† cung c·∫•p', icon: Building2, color: 'green', badge: 'Ngu·ªìn h√†ng' },
    distributor: { label: 'NPP', icon: Truck, color: 'purple', badge: 'Ph√¢n ph·ªëi' },
    agent: { label: 'ƒê·∫°i l√Ω', icon: Store, color: 'orange', badge: 'B√°n l·∫ª' }
  }
  return types[type as keyof typeof types] || types.customer
}

export const Partners: React.FC = () => {
  const [partners] = useState<Partner[]>(mockPartners)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedType, setSelectedType] = useState('all')
  const [selectedStatus, setSelectedStatus] = useState('all')
  const navigate = useNavigate()

  const filteredPartners = partners.filter(partner => {
    const matchesSearch = partner.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         partner.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         partner.contactPerson.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesType = selectedType === 'all' || partner.type === selectedType
    const matchesStatus = selectedStatus === 'all' || partner.status === selectedStatus
    return matchesSearch && matchesType && matchesStatus
  })

  const stats = {
    total: partners.length,
    active: partners.filter(p => p.status === 'active').length,
    customers: partners.filter(p => p.type === 'customer').length,
    suppliers: partners.filter(p => p.type === 'supplier').length,
    distributors: partners.filter(p => p.type === 'distributor').length,
    agents: partners.filter(p => p.type === 'agent').length,
    totalRevenue: partners.reduce((sum, p) => sum + p.totalRevenue, 0),
    totalOrders: partners.reduce((sum, p) => sum + p.totalOrders, 0)
  }

  const handleAddPartner = (type: string) => {
    const routes = {
      customer: '/customers',
      supplier: '/suppliers',
      distributor: '/distributors',
      agent: '/agents'
    }
    navigate(routes[type as keyof typeof routes] || '/customers')
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900  flex items-center gap-3">
            <Users className="w-8 h-8 text-teal-600" />
            üë• Kh√°ch h√†ng & ƒê·ªëi t√°c
          </h1>
          <p className="text-gray-600  mt-2">
            Qu·∫£n l√Ω t·ªïng quan t·∫•t c·∫£ kh√°ch h√†ng, nh√† cung c·∫•p, NPP v√† ƒë·∫°i l√Ω
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => handleAddPartner('customer')}>
            <UserCheck className="w-4 h-4 mr-2" />
            Th√™m kh√°ch h√†ng
          </Button>
          <Button variant="outline" onClick={() => handleAddPartner('supplier')}>
            <Building2 className="w-4 h-4 mr-2" />
            Th√™m NCC
          </Button>
          <Button variant="outline" onClick={() => handleAddPartner('distributor')}>
            <Truck className="w-4 h-4 mr-2" />
            Th√™m NPP
          </Button>
          <Button variant="outline" onClick={() => handleAddPartner('agent')}>
            <Store className="w-4 h-4 mr-2" />
            Th√™m ƒë·∫°i l√Ω
          </Button>
        </div>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-8 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-gray-900">{partners.length}</p>
              <p className="text-xs text-gray-500">T·ªïng ƒë·ªëi t√°c</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-green-600">{stats.active}</p>
              <p className="text-xs text-gray-500">ƒêang ho·∫°t ƒë·ªông</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-blue-600">{stats.customers}</p>
              <p className="text-xs text-gray-500">Kh√°ch h√†ng</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-green-600">{stats.suppliers}</p>
              <p className="text-xs text-gray-500">Nh√† cung c·∫•p</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-purple-600">{stats.distributors}</p>
              <p className="text-xs text-gray-500">NPP</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-orange-600">{stats.agents}</p>
              <p className="text-xs text-gray-500">ƒê·∫°i l√Ω</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-indigo-600">{stats.totalOrders}</p>
              <p className="text-xs text-gray-500">T·ªïng ƒë∆°n h√†ng</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-center">
              <p className="text-2xl font-bold text-pink-600">
                {(stats.totalRevenue / 1000000000).toFixed(1)}B
              </p>
              <p className="text-xs text-gray-500">T·ªïng doanh thu</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => navigate('/customers')}>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <UserCheck className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">Kh√°ch h√†ng</h3>
                <p className="text-sm text-gray-500">Qu·∫£n l√Ω kh√°ch l·∫ª, s·ªâ, doanh nghi·ªáp</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => navigate('/suppliers')}>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <Building2 className="w-6 h-6 text-green-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">Nh√† cung c·∫•p</h3>
                <p className="text-sm text-gray-500">Qu·∫£n l√Ω ngu·ªìn h√†ng, h·ª£p ƒë·ªìng</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => navigate('/distributors')}>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                <Truck className="w-6 h-6 text-purple-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">Nh√† ph√¢n ph·ªëi</h3>
                <p className="text-sm text-gray-500">Nh√† ph√¢n ph·ªëi c·∫•p 1, c·∫•p 2</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="cursor-pointer hover:shadow-lg transition-shadow" onClick={() => navigate('/agents')}>
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                <Store className="w-6 h-6 text-orange-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900">ƒê·∫°i l√Ω</h3>
                <p className="text-sm text-gray-500">Chi nh√°nh, shop, reseller</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="T√¨m ki·∫øm ƒë·ªëi t√°c, m√£, ng∆∞·ªùi li√™n h·ªá..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex gap-2">
              <select
                value={selectedType}
                onChange={(e) => setSelectedType(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
              >
                <option value="all">T·∫•t c·∫£ lo·∫°i</option>
                <option value="customer">Kh√°ch h√†ng</option>
                <option value="supplier">Nh√† cung c·∫•p</option>
                <option value="distributor">NPP</option>
                <option value="agent">ƒê·∫°i l√Ω</option>
              </select>
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500"
              >
                <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value="active">ƒêang ho·∫°t ƒë·ªông</option>
                <option value="inactive">T·∫°m d·ª´ng</option>
              </select>
              <Button variant="outline">
                <Filter className="w-4 h-4 mr-2" />
                B·ªô l·ªçc
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Partners List */}
      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {filteredPartners.map((partner) => {
          const typeInfo = getPartnerTypeInfo(partner.type)
          const IconComponent = typeInfo.icon
          
          return (
            <motion.div
              key={partner.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Card className="hover:shadow-lg transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-10 h-10 bg-${typeInfo.color}-100 rounded-lg flex items-center justify-center`}>
                        <IconComponent className={`w-5 h-5 text-${typeInfo.color}-600`} />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{partner.name}</CardTitle>
                        <CardDescription className="text-sm text-gray-500">
                          {partner.code}
                        </CardDescription>
                      </div>
                    </div>
                    <div className="flex flex-col gap-2">
                      <Badge variant={partner.status === 'active' ? 'default' : 'secondary'}>
                        {partner.status === 'active' ? 'Ho·∫°t ƒë·ªông' : 'T·∫°m d·ª´ng'}
                      </Badge>
                      <Badge variant="outline" className={`text-${typeInfo.color}-600 border-${typeInfo.color}-200`}>
                        {typeInfo.badge}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-sm">
                      <MapPin className="w-4 h-4 text-gray-400" />
                      <span>{partner.region}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm">
                      <Users className="w-4 h-4 text-gray-400" />
                      <span>{partner.contactPerson}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm">
                      <Phone className="w-4 h-4 text-gray-400" />
                      <span>{partner.phone}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm">
                      <Mail className="w-4 h-4 text-gray-400" />
                      <span className="truncate">{partner.email}</span>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4 pt-4 border-t">
                    <div className="text-center">
                      <p className="text-2xl font-bold text-blue-600">{partner.totalOrders}</p>
                      <p className="text-xs text-gray-500">ƒê∆°n h√†ng</p>
                    </div>
                    <div className="text-center">
                      <p className="text-2xl font-bold text-green-600">
                        {(partner.totalRevenue / 1000000).toFixed(0)}M
                      </p>
                      <p className="text-xs text-gray-500">Doanh thu</p>
                    </div>
                  </div>

                  <div className="flex gap-2 pt-4">
                    <Button size="sm" variant="outline" className="flex-1">
                      <Eye className="w-4 h-4 mr-1" />
                      Xem
                    </Button>
                    <Button size="sm" variant="outline" className="flex-1">
                      <Edit className="w-4 h-4 mr-1" />
                      S·ª≠a
                    </Button>
                    <Button size="sm" variant="outline" className="text-red-600 hover:text-red-700">
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          )
        })}
      </div>

      {filteredPartners.length === 0 && (
        <Card>
          <CardContent className="p-12 text-center">
            <Users className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900  mb-2">
              Kh√¥ng t√¨m th·∫•y ƒë·ªëi t√°c n√†o
            </h3>
            <p className="text-gray-600  mb-4">
              Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c b·ªô l·ªçc
            </p>
            <div className="flex gap-2 justify-center">
              <Button onClick={() => handleAddPartner('customer')}>
                <UserCheck className="w-4 h-4 mr-2" />
                Th√™m kh√°ch h√†ng
              </Button>
              <Button variant="outline" onClick={() => handleAddPartner('supplier')}>
                <Building2 className="w-4 h-4 mr-2" />
                Th√™m NCC
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
      </div>
    </div>
  )
}

export default Partners
