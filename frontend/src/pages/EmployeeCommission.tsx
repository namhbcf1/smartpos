import React, { useState, useMemo } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  Stack,
  Card,
  CardContent,
  Grid,
  TextField,
  MenuItem,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  useTheme,
  useMediaQuery,
  Skeleton,
  InputAdornment,
  Avatar,
  LinearProgress,
  Pagination,
  CircularProgress,
  Tooltip
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Refresh as RefreshIcon,
  People as PeopleIcon,
  AttachMoney as CommissionIcon,
  Work as WorkIcon,
  Clear as ClearIcon,
  Search as SearchIcon,
  AdminPanelSettings as AdminIcon,
  PointOfSale as CashierIcon,
  TrendingUp as SalesIcon,
  Group as AffiliateIcon,
  VpnKey as PasswordIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Security as SecurityIcon
} from '@mui/icons-material';
import { useSnackbar } from 'notistack';
import { usePaginatedQuery } from '../hooks/useApiData';
import { formatCurrency } from '../config/constants';
import api from '../services/api';
import axios from 'axios';
import PermissionManagementModal from '../components/PermissionManagementModal';
import RoleTemplateManager from '../components/RoleTemplateManager';

// Types
interface Employee {
  id: number;
  full_name: string;
  phone: string | null;
  email: string | null;
  role: 'admin' | 'cashier' | 'sales_agent' | 'affiliate';
  commission_rate: number;
  base_salary: number;
  hire_date: string;
  status: 'active' | 'inactive';
  notes: string | null;
  created_at: string;
}

// Helper functions
const getRoleLabel = (role: Employee['role']) => {
  switch (role) {
    case 'admin': return 'Qu·∫£n tr·ªã vi√™n';
    case 'cashier': return 'Thu ng√¢n';
    case 'sales_agent': return 'Nh√¢n vi√™n kinh doanh';
    case 'affiliate': return 'C·ªông t√°c vi√™n';
    default: return role;
  }
};

const getRoleColor = (role: Employee['role']): 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' => {
  switch (role) {
    case 'admin': return 'error';
    case 'cashier': return 'primary';
    case 'sales_agent': return 'info';
    case 'affiliate': return 'success';
    default: return 'default';
  }
};

const getRoleIcon = (role: Employee['role']) => {
  switch (role) {
    case 'admin': return <AdminIcon />;
    case 'cashier': return <CashierIcon />;
    case 'sales_agent': return <SalesIcon />;
    case 'affiliate': return <AffiliateIcon />;
    default: return <WorkIcon />;
  }
};

const EmployeeCommission = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const { enqueueSnackbar } = useSnackbar();

  // State
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('active');
  const [openDialog, setOpenDialog] = useState(false);
  const [openPasswordDialog, setOpenPasswordDialog] = useState(false);
  const [selectedEmployeeForPassword, setSelectedEmployeeForPassword] = useState<Employee | null>(null);
  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);
  const [openPermissionDialog, setOpenPermissionDialog] = useState(false);
  const [selectedEmployeeForPermissions, setSelectedEmployeeForPermissions] = useState<Employee | null>(null);
  const [openRoleTemplateManager, setOpenRoleTemplateManager] = useState(false);
  const [formData, setFormData] = useState({
    full_name: '',
    phone: '',
    email: '',
    role: 'cashier' as Employee['role'],
    commission_rate: 0,
    base_salary: 0,
    status: 'active' as Employee['status'],
    notes: ''
  });
  const [passwordForm, setPasswordForm] = useState({
    username: '',
    password: '',
    confirmPassword: '',
    showPassword: false,
    showConfirmPassword: false
  });
  const [loading, setLoading] = useState(false);
  const [passwordLoading, setPasswordLoading] = useState(false);

  // Build query params
  const queryParams = useMemo(() => {
    const params: Record<string, any> = {};

    if (searchTerm.trim()) {
      params.search = searchTerm.trim();
    }

    if (roleFilter) {
      params.role = roleFilter;
    }

    if (statusFilter) {
      params.status = statusFilter;
    }

    return params;
  }, [searchTerm, roleFilter, statusFilter]);

  // Fetch employees data
  const {
    data: employees,
    pagination,
    isLoading,
    error,
    refetch,
    handlePageChange,
    handleLimitChange,
    page: currentPage,
    limit: currentLimit
  } = usePaginatedQuery<Employee>('/employees/simple', queryParams);

  // Role options
  const roleOptions = [
    { value: 'admin', label: 'üëë Qu·∫£n tr·ªã vi√™n', color: 'error' as const },
    { value: 'cashier', label: 'üí∞ Thu ng√¢n', color: 'primary' as const },
    { value: 'sales_agent', label: 'ü§ù Nh√¢n vi√™n kinh doanh', color: 'success' as const },
    { value: 'affiliate', label: 'üåü C·ªông t√°c vi√™n', color: 'warning' as const }
  ];

  const getRoleInfo = (role: string) => {
    return roleOptions.find(option => option.value === role) || roleOptions[1];
  };

  // Statistics
  const stats = useMemo(() => {
    if (!employees || employees.length === 0) {
      return {
        totalEmployees: 0,
        activeEmployees: 0,
        totalSalary: 0,
        avgCommission: 0
      };
    }

    return {
      totalEmployees: pagination?.total || 0,
      activeEmployees: employees.filter(emp => emp.status === 'active').length,
      totalSalary: employees.reduce((sum, emp) => sum + (emp.base_salary || 0), 0),
      avgCommission: employees.length > 0 
        ? employees.reduce((sum, emp) => sum + (emp.commission_rate || 0), 0) / employees.length 
        : 0
    };
  }, [employees, pagination]);

  // Handle form
  const handleOpenDialog = (employee?: Employee) => {
    if (employee) {
      setEditingEmployee(employee);
      setFormData({
        full_name: employee.full_name,
        phone: employee.phone || '',
        email: employee.email || '',
        role: employee.role,
        commission_rate: employee.commission_rate || 0,
        base_salary: employee.base_salary || 0,
        status: employee.status,
        notes: employee.notes || ''
      });
    } else {
      setEditingEmployee(null);
      setFormData({
        full_name: '',
        phone: '',
        email: '',
        role: 'cashier',
        commission_rate: 0,
        base_salary: 0,
        status: 'active',
        notes: ''
      });
    }
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setEditingEmployee(null);
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);

      if (!formData.full_name.trim()) {
        enqueueSnackbar('Vui l√≤ng nh·∫≠p t√™n nh√¢n vi√™n', { variant: 'error' });
        return;
      }

      const payload = {
        ...formData,
        commission_rate: Number(formData.commission_rate),
        base_salary: Number(formData.base_salary)
      };

      if (editingEmployee) {
        // Update
        const response = await api.put(`/employees/${editingEmployee.id}`, payload);
        if (response.success) {
          enqueueSnackbar('C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng', { variant: 'success' });
          refetch();
          handleCloseDialog();
        }
      } else {
        // Create
        const response = await api.post('/employees', payload);
        if (response.success) {
          enqueueSnackbar('T·∫°o nh√¢n vi√™n th√†nh c√¥ng', { variant: 'success' });
          refetch();
          handleCloseDialog();
        }
      }
    } catch (error) {
      console.error('Submit employee error:', error);
      enqueueSnackbar('L·ªói khi l∆∞u th√¥ng tin nh√¢n vi√™n', { variant: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (employee: Employee) => {
    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n "${employee.full_name}"?`)) {
      return;
    }

    try {
      const response = await api.delete(`/employees/${employee.id}`);
      if (response.success) {
        enqueueSnackbar('X√≥a nh√¢n vi√™n th√†nh c√¥ng', { variant: 'success' });
        refetch();
      }
    } catch (error) {
      console.error('Delete employee error:', error);
      enqueueSnackbar('L·ªói khi x√≥a nh√¢n vi√™n', { variant: 'error' });
    }
  };

  const clearFilters = () => {
    setSearchTerm('');
    setRoleFilter('');
    setStatusFilter('active');
  };

  // Password management functions
  const handleOpenPasswordDialog = (employee: Employee) => {
    console.log('üîç Opening password dialog for employee:', employee);
    setSelectedEmployeeForPassword(employee);

    // For now, let's use a simpler approach - just set defaults and open dialog
    setPasswordForm({
      username: employee.full_name.toLowerCase().replace(/\s+/g, '').replace(/[^a-z0-9]/g, '') || `user${employee.id}`,
      password: '123456', // Default password
      confirmPassword: '',
      showPassword: false,
      showConfirmPassword: false
    });

    setOpenPasswordDialog(true);

    // Load existing user data in background
    loadExistingUserData(employee);
  };

  const loadExistingUserData = async (employee: Employee) => {
    try {
      console.log(`üåê Loading existing user data for employee ID: ${employee.id}`);

      const response = await axios.get(
        `https://smartpos-api.bangachieu2.workers.dev/api/v1/users/employee/${employee.id}`,
        {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          withCredentials: true,
        }
      );

      console.log('üì° API Response:', response);

      if (response.data.success) {
        const existingUser = response.data.data;
        console.log('‚úÖ Found existing user:', existingUser);

        // Update form with existing user data
        setPasswordForm(prev => ({
          ...prev,
          username: existingUser.username,
          password: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' // Show masked password for existing user
        }));
      } else {
        console.log('‚ùå API returned error:', response.data.message);
      }
    } catch (error) {
      console.log('‚ùå API call failed:', error);
      console.log('No existing user found, will use defaults');
    }
  };

  const handleClosePasswordDialog = () => {
    setOpenPasswordDialog(false);
    setSelectedEmployeeForPassword(null);
    setPasswordForm({
      username: '',
      password: '',
      confirmPassword: '',
      showPassword: false,
      showConfirmPassword: false
    });
  };

  const handlePasswordFormChange = (field: string, value: any) => {
    setPasswordForm(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const validatePasswordForm = () => {
    if (!passwordForm.username.trim()) {
      enqueueSnackbar('Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p', { variant: 'error' });
      return false;
    }
    if (passwordForm.username.length < 3) {
      enqueueSnackbar('T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±', { variant: 'error' });
      return false;
    }
    if (!/^[a-z0-9]+$/.test(passwordForm.username)) {
      enqueueSnackbar('T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i th∆∞·ªùng v√† s·ªë', { variant: 'error' });
      return false;
    }
    if (!passwordForm.password) {
      enqueueSnackbar('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u', { variant: 'error' });
      return false;
    }
    if (passwordForm.password.length < 4) {
      enqueueSnackbar('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±', { variant: 'error' });
      return false;
    }
    if (passwordForm.password !== passwordForm.confirmPassword) {
      enqueueSnackbar('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp', { variant: 'error' });
      return false;
    }
    return true;
  };

  const handleCreateUserAccount = async () => {
    if (!validatePasswordForm() || !selectedEmployeeForPassword) return;

    try {
      setPasswordLoading(true);

      // Map employee role to user role
      const mapRole = (employeeRole: string) => {
        switch (employeeRole) {
          case 'admin': return 'admin';
          case 'sales_agent': return 'sales_agent';
          case 'cashier': return 'cashier';
          case 'affiliate': return 'affiliate';
          case 'inventory': return 'inventory';
          default: return 'cashier';
        }
      };

      const payload = {
        username: passwordForm.username.trim(),
        password: passwordForm.password,
        email: selectedEmployeeForPassword.email || `${passwordForm.username}@smartpos.com`,
        full_name: selectedEmployeeForPassword.full_name,
        role: mapRole(selectedEmployeeForPassword.role),
        store_id: 1,
        employee_id: selectedEmployeeForPassword.id
      };

      console.log('üîê Creating/Updating user account with payload:', payload);

      // Use direct axios call to get full response
      const response = await axios.post(
        'https://smartpos-api.bangachieu2.workers.dev/api/v1/auth/register',
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          withCredentials: true,
          timeout: 15000, // 15 seconds timeout
        }
      );

      console.log('‚úÖ API response:', response.data);

      if (response.data && response.data.success) {
        const message = response.data.message || `C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng cho ${selectedEmployeeForPassword.full_name}`;
        enqueueSnackbar(message, { variant: 'success' });

        // Close modal after successful update
        handleClosePasswordDialog();

        // Optional: Refresh employee list to show updated data
        // refetch();
      } else {
        const errorMsg = response.data?.message || 'L·ªói khi c·∫≠p nh·∫≠t t√†i kho·∫£n';
        console.error('‚ùå API returned error:', errorMsg);
        enqueueSnackbar(errorMsg, { variant: 'error' });
      }
    } catch (error: any) {
      console.error('üí• Create user account error:', error);

      let errorMessage = 'L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u';

      if (error.response) {
        // Server responded with error status
        errorMessage = error.response.data?.message || `L·ªói ${error.response.status}: ${error.response.statusText}`;
      } else if (error.request) {
        // Request was made but no response received
        errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.';
      } else {
        // Something else happened
        errorMessage = error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      }

      enqueueSnackbar(errorMessage, { variant: 'error' });
    } finally {
      setPasswordLoading(false);
    }
  };

  const handleCreateAllUserAccounts = async () => {
    if (!employees || employees.length === 0) {
      enqueueSnackbar('Kh√¥ng c√≥ nh√¢n vi√™n n√†o ƒë·ªÉ t·∫°o t√†i kho·∫£n', { variant: 'warning' });
      return;
    }

    const confirmMessage = `B·∫°n c√≥ ch·∫Øc mu·ªën t·∫°o t√†i kho·∫£n ƒëƒÉng nh·∫≠p cho t·∫•t c·∫£ ${employees.length} nh√¢n vi√™n?\n\nM·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh s·∫Ω l√† "123456"`;
    if (!confirm(confirmMessage)) {
      return;
    }

    try {
      setPasswordLoading(true);

      // Call API to create users from employees
      const response = await api.post('/auth/create-users-from-employees');

      if (response.success) {
        const { data } = response.data;
        enqueueSnackbar(
          `T·∫°o th√†nh c√¥ng ${data.users_created} t√†i kho·∫£n, ${data.users_existing} t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i`,
          { variant: 'success' }
        );

        // Show login info
        if (data.login_info && data.login_info.length > 0) {
          console.log('=== TH√îNG TIN ƒêƒÇNG NH·∫¨P ===');
          data.login_info.forEach((user: any) => {
            console.log(`${user.username}/123456 - ${user.employee_name} (${user.role})`);
          });

          enqueueSnackbar(
            `Ki·ªÉm tra console ƒë·ªÉ xem th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa ${data.login_info.length} t√†i kho·∫£n m·ªõi`,
            { variant: 'info' }
          );
        }
      } else {
        enqueueSnackbar(response.message || 'L·ªói khi t·∫°o t√†i kho·∫£n', { variant: 'error' });
      }
    } catch (error: any) {
      console.error('Create all user accounts error:', error);
      enqueueSnackbar(error.response?.data?.message || 'L·ªói khi t·∫°o t√†i kho·∫£n cho nh√¢n vi√™n', { variant: 'error' });
    } finally {
      setPasswordLoading(false);
    }
  };

  // Permission management handlers
  const handleOpenPermissionDialog = (employee: Employee) => {
    setSelectedEmployeeForPermissions(employee);
    setOpenPermissionDialog(true);
  };

  const handleClosePermissionDialog = () => {
    setOpenPermissionDialog(false);
    setSelectedEmployeeForPermissions(null);
  };

  const handlePermissionsUpdated = () => {
    // Refresh employee data if needed
    refetch();
  };

  if (isLoading && !employees) {
    return (
      <Box sx={{ p: 3 }}>
        <Skeleton variant="text" width={300} height={40} />
        <Grid container spacing={3} sx={{ mt: 2 }}>
          {[1, 2, 3, 4].map((i) => (
            <Grid item xs={12} sm={6} md={3} key={i}>
              <Skeleton variant="rectangular" height={120} />
            </Grid>
          ))}
        </Grid>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <PeopleIcon />
            Nh√¢n vi√™n & Hoa h·ªìng
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Qu·∫£n l√Ω nh√¢n vi√™n b√°n h√†ng v√† h·ªá th·ªëng hoa h·ªìng
          </Typography>
        </Box>
        <Stack direction="row" spacing={1}>
          <Button
            variant="outlined"
            startIcon={<RefreshIcon />}
            onClick={refetch}
            disabled={isLoading}
          >
            L√†m m·ªõi
          </Button>
          <Button
            variant="outlined"
            startIcon={<PasswordIcon />}
            onClick={handleCreateAllUserAccounts}
            disabled={isLoading || passwordLoading}
            color="secondary"
          >
            T·∫°o t√†i kho·∫£n cho t·∫•t c·∫£
          </Button>
          <Button
            variant="outlined"
            startIcon={<SecurityIcon />}
            onClick={() => setOpenRoleTemplateManager(true)}
            color="info"
          >
            Qu·∫£n l√Ω vai tr√≤
          </Button>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => handleOpenDialog()}
          >
            Th√™m nh√¢n vi√™n
          </Button>
        </Stack>
      </Box>

      {/* Statistics */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography color="text.secondary" gutterBottom>
                    T·ªïng nh√¢n vi√™n
                  </Typography>
                  <Typography variant="h4">
                    {stats.totalEmployees}
                  </Typography>
                </Box>
                <PeopleIcon color="primary" sx={{ fontSize: 40 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography color="text.secondary" gutterBottom>
                    ƒêang ho·∫°t ƒë·ªông
                  </Typography>
                  <Typography variant="h4">
                    {stats.activeEmployees}
                  </Typography>
                </Box>
                <WorkIcon color="success" sx={{ fontSize: 40 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography color="text.secondary" gutterBottom>
                    T·ªïng l∆∞∆°ng c∆° b·∫£n
                  </Typography>
                  <Typography variant="h4">
                    {formatCurrency(stats.totalSalary)}
                  </Typography>
                </Box>
                <CommissionIcon color="warning" sx={{ fontSize: 40 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                <Box>
                  <Typography color="text.secondary" gutterBottom>
                    Hoa h·ªìng TB
                  </Typography>
                  <Typography variant="h4">
                    {stats.avgCommission.toFixed(1)}%
                  </Typography>
                </Box>
                <CommissionIcon color="info" sx={{ fontSize: 40 }} />
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Filters */}
      <Paper sx={{ p: 2, mb: 2 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} sm={6} md={4}>
            <TextField
              fullWidth
              placeholder="T√¨m ki·∫øm nh√¢n vi√™n..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              size="small"
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
            />
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <FormControl fullWidth size="small">
              <InputLabel>Vai tr√≤</InputLabel>
              <Select
                value={roleFilter}
                label="Vai tr√≤"
                onChange={(e) => setRoleFilter(e.target.value)}
              >
                <MenuItem value="">T·∫•t c·∫£</MenuItem>
                <MenuItem value="admin">Qu·∫£n tr·ªã vi√™n</MenuItem>
                <MenuItem value="cashier">Thu ng√¢n</MenuItem>
                <MenuItem value="sales_agent">Nh√¢n vi√™n kinh doanh</MenuItem>
                <MenuItem value="affiliate">C·ªông t√°c vi√™n</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <FormControl fullWidth size="small">
              <InputLabel>Tr·∫°ng th√°i</InputLabel>
              <Select
                value={statusFilter}
                label="Tr·∫°ng th√°i"
                onChange={(e) => setStatusFilter(e.target.value)}
              >
                <MenuItem value="active">ƒêang ho·∫°t ƒë·ªông</MenuItem>
                <MenuItem value="inactive">Ng·ª´ng ho·∫°t ƒë·ªông</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={6} md={2}>
            <Button
              fullWidth
              variant="outlined"
              onClick={clearFilters}
              size="small"
            >
              X√≥a b·ªô l·ªçc
            </Button>
          </Grid>
        </Grid>
      </Paper>

      {/* Employee Table */}
      {isLoading ? (
        <Paper sx={{ p: 2 }}>
          <LinearProgress />
          <Box sx={{ mt: 2 }}>
            <Typography variant="body2" color="text.secondary">
              ƒêang t·∫£i d·ªØ li·ªáu nh√¢n vi√™n...
            </Typography>
          </Box>
        </Paper>
      ) : error ? (
        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Typography color="error" variant="h6" gutterBottom>
            ‚ö†Ô∏è C√≥ l·ªói x·∫£y ra
          </Typography>
          <Typography color="text.secondary" sx={{ mb: 2 }}>
            {error}
          </Typography>
          <Button
            variant="outlined"
            onClick={refetch}
            startIcon={<RefreshIcon />}
          >
            Th·ª≠ l·∫°i
          </Button>
        </Paper>
      ) : (
        <Paper>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Nh√¢n vi√™n</TableCell>
                  <TableCell>Vai tr√≤</TableCell>
                  <TableCell align="right">L∆∞∆°ng c∆° b·∫£n</TableCell>
                  <TableCell align="center">Hoa h·ªìng</TableCell>
                  <TableCell align="center">Tr·∫°ng th√°i</TableCell>
                  <TableCell align="center">Thao t√°c</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {employees && employees.length > 0 ? (
                  employees.map((employee) => (
                    <TableRow key={employee.id} hover>
                      <TableCell>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Avatar sx={{ mr: 2, bgcolor: getRoleColor(employee.role) }}>
                            {employee.full_name.charAt(0)}
                          </Avatar>
                          <Box>
                            <Typography variant="subtitle2" fontWeight="medium">
                              {employee.full_name}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              {employee.email}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              {employee.phone}
                            </Typography>
                          </Box>
                        </Box>
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={getRoleLabel(employee.role)}
                          color={getRoleColor(employee.role)}
                          size="small"
                          icon={getRoleIcon(employee.role)}
                        />
                      </TableCell>
                      <TableCell align="right">
                        <Typography variant="body2" fontWeight="medium">
                          {(employee.base_salary || 0).toLocaleString('vi-VN')} ‚Ç´
                        </Typography>
                      </TableCell>
                      <TableCell align="center">
                        <Typography variant="body2" fontWeight="medium" color="primary">
                          {(employee.commission_rate || 0)}%
                        </Typography>
                      </TableCell>
                      <TableCell align="center">
                        <Chip
                          label={employee.status === 'active' ? 'Ho·∫°t ƒë·ªông' : 'Ng·ª´ng ho·∫°t ƒë·ªông'}
                          color={employee.status === 'active' ? 'success' : 'default'}
                          size="small"
                        />
                      </TableCell>
                      <TableCell align="center">
                        <Stack direction="row" spacing={1} justifyContent="center">
                          <Tooltip title="Ch·ªânh s·ª≠a th√¥ng tin">
                            <IconButton
                              size="small"
                              onClick={() => handleOpenDialog(employee)}
                              color="primary"
                            >
                              <EditIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Qu·∫£n l√Ω t√†i kho·∫£n ƒëƒÉng nh·∫≠p">
                            <IconButton
                              size="small"
                              onClick={() => handleOpenPasswordDialog(employee)}
                              color="secondary"
                            >
                              <PasswordIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Qu·∫£n l√Ω quy·ªÅn h·∫°n">
                            <IconButton
                              size="small"
                              onClick={() => handleOpenPermissionDialog(employee)}
                              color="info"
                            >
                              <SecurityIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="X√≥a nh√¢n vi√™n">
                            <IconButton
                              size="small"
                              onClick={() => handleDelete(employee)}
                              color="error"
                            >
                              <DeleteIcon />
                            </IconButton>
                          </Tooltip>
                        </Stack>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={6} align="center">
                      <Box sx={{ py: 4 }}>
                        <Typography variant="body1" color="text.secondary">
                          Kh√¥ng c√≥ nh√¢n vi√™n n√†o
                        </Typography>
                      </Box>
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>

          {/* Pagination */}
          {pagination && pagination.totalPages > 1 && (
            <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
              <Pagination
                count={pagination.totalPages}
                page={currentPage}
                onChange={(_, page) => handlePageChange(page)}
                color="primary"
              />
            </Box>
          )}
        </Paper>
      )}

      {/* Employee Form Dialog */}
      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingEmployee ? 'S·ª≠a th√¥ng tin nh√¢n vi√™n' : 'Th√™m nh√¢n vi√™n m·ªõi'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="H·ªç v√† t√™n"
                value={formData.full_name}
                onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}
                required
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="S·ªë ƒëi·ªán tho·∫°i"
                value={formData.phone}
                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                required
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="Email"
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                required
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth required>
                <InputLabel>Vai tr√≤</InputLabel>
                <Select
                  value={formData.role}
                  label="Vai tr√≤"
                  onChange={(e) => setFormData({ ...formData, role: e.target.value as Employee['role'] })}
                >
                  <MenuItem value="admin">Qu·∫£n tr·ªã vi√™n</MenuItem>
                  <MenuItem value="cashier">Thu ng√¢n</MenuItem>
                  <MenuItem value="sales_agent">Nh√¢n vi√™n kinh doanh</MenuItem>
                  <MenuItem value="affiliate">C·ªông t√°c vi√™n</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="L∆∞∆°ng c∆° b·∫£n (‚Ç´)"
                type="number"
                value={formData.base_salary}
                onChange={(e) => setFormData({ ...formData, base_salary: parseInt(e.target.value) || 0 })}
                InputProps={{
                  endAdornment: <InputAdornment position="end">‚Ç´</InputAdornment>,
                }}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="T·ª∑ l·ªá hoa h·ªìng (%)"
                type="number"
                value={formData.commission_rate}
                onChange={(e) => setFormData({ ...formData, commission_rate: parseFloat(e.target.value) || 0 })}
                InputProps={{
                  endAdornment: <InputAdornment position="end">%</InputAdornment>,
                }}
                inputProps={{ min: 0, max: 100, step: 0.1 }}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Ghi ch√∫"
                multiline
                rows={3}
                value={formData.notes}
                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>H·ªßy</Button>
          <Button
            onClick={handleSubmit}
            variant="contained"
            disabled={loading}
            startIcon={loading ? <CircularProgress size={20} /> : null}
          >
            {editingEmployee ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Password Dialog */}
      <Dialog
        open={openPasswordDialog}
        onClose={handleClosePasswordDialog}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <PasswordIcon />
            Qu·∫£n l√Ω t√†i kho·∫£n ƒëƒÉng nh·∫≠p
          </Box>
          {selectedEmployeeForPassword && (
            <Typography variant="body2" color="text.secondary">
              Ch·ªânh s·ª≠a t√†i kho·∫£n ƒëƒÉng nh·∫≠p cho: {selectedEmployeeForPassword.full_name}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="T√™n ƒëƒÉng nh·∫≠p"
                value={passwordForm.username}
                onChange={(e) => handlePasswordFormChange('username', e.target.value.toLowerCase().replace(/[^a-z0-9]/g, ''))}
                helperText="T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±, ch·ªâ ch·ª©a ch·ªØ c√°i v√† s·ªë"
                inputProps={{
                  pattern: '[a-zA-Z0-9]+',
                  minLength: 3
                }}
                placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p m·ªõi"
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="M·∫≠t kh·∫©u"
                type={passwordForm.showPassword ? 'text' : 'password'}
                value={passwordForm.password}
                onChange={(e) => handlePasswordFormChange('password', e.target.value)}
                helperText="M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±"
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => handlePasswordFormChange('showPassword', !passwordForm.showPassword)}
                        edge="end"
                      >
                        {passwordForm.showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                inputProps={{ minLength: 6 }}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                type={passwordForm.showConfirmPassword ? 'text' : 'password'}
                value={passwordForm.confirmPassword}
                onChange={(e) => handlePasswordFormChange('confirmPassword', e.target.value)}
                error={Boolean(passwordForm.confirmPassword && passwordForm.password !== passwordForm.confirmPassword)}
                helperText={
                  passwordForm.confirmPassword && passwordForm.password !== passwordForm.confirmPassword
                    ? 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp'
                    : 'Nh·∫≠p l·∫°i m·∫≠t kh·∫©u ƒë·ªÉ x√°c nh·∫≠n'
                }
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => handlePasswordFormChange('showConfirmPassword', !passwordForm.showConfirmPassword)}
                        edge="end"
                      >
                        {passwordForm.showConfirmPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            {selectedEmployeeForPassword && (
              <Grid item xs={12}>
                <Paper sx={{ p: 2, bgcolor: 'background.default' }}>
                  <Typography variant="subtitle2" gutterBottom>
                    Th√¥ng tin t√†i kho·∫£n s·∫Ω t·∫°o:
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    ‚Ä¢ H·ªç t√™n: {selectedEmployeeForPassword.full_name}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    ‚Ä¢ Email: {selectedEmployeeForPassword.email || `${passwordForm.username}@smartpos.com`}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    ‚Ä¢ Vai tr√≤: {getRoleLabel(selectedEmployeeForPassword.role)}
                  </Typography>
                </Paper>
              </Grid>
            )}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClosePasswordDialog}>H·ªßy</Button>
          <Button
            onClick={handleCreateUserAccount}
            variant="contained"
            disabled={passwordLoading || !passwordForm.username || !passwordForm.password || passwordForm.password !== passwordForm.confirmPassword}
            startIcon={passwordLoading ? <CircularProgress size={20} /> : <PasswordIcon />}
          >
            {passwordLoading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t t√†i kho·∫£n'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Permission Management Modal */}
      <PermissionManagementModal
        open={openPermissionDialog}
        onClose={handleClosePermissionDialog}
        employee={selectedEmployeeForPermissions}
        onPermissionsUpdated={handlePermissionsUpdated}
      />

      {/* Role Template Manager */}
      <RoleTemplateManager
        open={openRoleTemplateManager}
        onClose={() => setOpenRoleTemplateManager(false)}
        onRoleTemplateCreated={() => {
          // Refresh data if needed
          refetch();
        }}
      />
    </Box>
  );
};

export default EmployeeCommission;
