// Warranty Notifications System
// Automated warranty expiration notifications via SMS, Zalo, Email

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Bell,
  Plus,
  Search,
  Send,
  Edit,
  Eye,
  Calendar,
  Clock,
  User,
  Phone,
  Mail,
  MessageSquare,
  CheckCircle,
  XCircle,
  AlertTriangle,
  Settings,
  Filter,
  PlayCircle,
  PauseCircle,
  RefreshCw,
  Download,
  Upload,
  Zap,
  FileText,
  Target,
  TrendingUp
} from 'lucide-react';
import { Card, CardContent } from '../../components/ui/Card';
import { Button } from '../../components/ui/ButtonSimplified';
import { formatDate } from '../../lib/utils';
import toast from 'react-hot-toast';

interface WarrantyNotification {
  id: string;
  warranty_id: string;
  customer_name: string;
  customer_phone: string;
  customer_email: string;
  product_name: string;
  product_serial: string;
  warranty_end_date: string;
  days_until_expiry: number;
  notification_type: 'email' | 'sms' | 'zalo' | 'push';
  template_id: string;
  template_name: string;
  status: 'pending' | 'sent' | 'delivered' | 'failed' | 'scheduled';
  scheduled_date: string;
  sent_date?: string;
  delivery_status?: string;
  error_message?: string;
  created_date: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  retry_count: number;
}

interface NotificationTemplate {
  id: string;
  name: string;
  type: 'email' | 'sms' | 'zalo' | 'push';
  subject?: string;
  content: string;
  variables: string[];
  is_active: boolean;
  created_date: string;
  usage_count: number;
}

interface NotificationRule {
  id: string;
  name: string;
  trigger_days: number[];
  notification_types: ('email' | 'sms' | 'zalo' | 'push')[];
  template_ids: string[];
  conditions: {
    warranty_type?: string[];
    customer_tier?: string[];
    product_category?: string[];
  };
  is_active: boolean;
  created_date: string;
}

const WarrantyNotifications: React.FC = () => {
  const [notifications, setNotifications] = useState<WarrantyNotification[]>([]);
  const [templates, setTemplates] = useState<NotificationTemplate[]>([]);
  const [rules, setRules] = useState<NotificationRule[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [typeFilter, setTypeFilter] = useState('all');
  const [selectedNotification, setSelectedNotification] = useState<WarrantyNotification | null>(null);
  const [showNotificationModal, setShowNotificationModal] = useState(false);
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [showRuleModal, setShowRuleModal] = useState(false);
  const [activeTab, setActiveTab] = useState('notifications');

  useEffect(() => {
    loadNotifications();
    loadTemplates();
    loadRules();
  }, []);

  const loadNotifications = async () => {
    setLoading(true);
    try {
      // Fetch notifications from real API
      const apiUrl = process.env.REACT_APP_API_URL || window.location.origin;
      const token = localStorage.getItem('authToken');

      const response = await fetch(`${apiUrl}/api/v1/warranty/notifications`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-Tenant-ID': 'default',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch warranty notifications');
      }

      const data = await response.json();

      if (data.success && data.data) {
        setNotifications(data.data.notifications || []);
      } else {
        setNotifications([]);
      }
    } catch (error) {
      console.error('Failed to load notifications:', error);
      toast.error('Không thể tải danh sách thông báo');
    } finally {
      setLoading(false);
    }
  };

  const loadTemplates = async () => {
    try {
      // Fetch templates from real API
      const apiUrl = process.env.REACT_APP_API_URL || window.location.origin;
      const token = localStorage.getItem('authToken');

      const response = await fetch(`${apiUrl}/api/v1/warranty/notification-templates`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-Tenant-ID': 'default',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch notification templates');
      }

      const data = await response.json();

      if (data.success && data.data) {
        setTemplates(data.data.templates || []);
      } else {
        setTemplates([]);
      }
    } catch (error) {
      console.error('Failed to load templates:', error);
      setTemplates([]);
    }
  };

  const loadRules = async () => {
    try {
      // Fetch rules from real API
      const apiUrl = process.env.REACT_APP_API_URL || window.location.origin;
      const token = localStorage.getItem('authToken');

      const response = await fetch(`${apiUrl}/api/v1/warranty/notification-rules`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-Tenant-ID': 'default',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch notification rules');
      }

      const data = await response.json();

      if (data.success && data.data) {
        setRules(data.data.rules || []);
      } else {
        setRules([]);
      }
    } catch (error) {
      console.error('Failed to load rules:', error);
      setRules([]);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800  
      case 'scheduled': return 'bg-blue-100 text-blue-800  
      case 'sent': return 'bg-green-100 text-green-800  
      case 'delivered': return 'bg-emerald-100 text-emerald-800  
      case 'failed': return 'bg-red-100 text-red-800  
      default: return 'bg-gray-100 text-gray-800  
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'low': return 'bg-gray-100 text-gray-800  
      case 'medium': return 'bg-blue-100 text-blue-800  
      case 'high': return 'bg-orange-100 text-orange-800  
      case 'urgent': return 'bg-red-100 text-red-800  
      default: return 'bg-gray-100 text-gray-800  
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'email': return Mail;
      case 'sms': return MessageSquare;
      case 'zalo': return MessageSquare;
      case 'push': return Bell;
      default: return Bell;
    }
  };

  const handleSendNotification = async (notificationId: string) => {
    try {
      // Send notification via real API
      const apiUrl = process.env.REACT_APP_API_URL || window.location.origin;
      const token = localStorage.getItem('authToken');

      const response = await fetch(`${apiUrl}/api/v1/warranty/notifications/${notificationId}/send`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-Tenant-ID': 'default',
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to send notification');
      }

      const data = await response.json();

      if (data.success) {
        // Update local state
        const updatedNotifications = notifications.map(n =>
          n.id === notificationId
            ? { ...n, status: 'sent' as const, sent_date: new Date().toISOString() }
            : n
        );
        setNotifications(updatedNotifications);
        toast.success('Thông báo đã được gửi thành công');
      } else {
        throw new Error(data.error || 'Failed to send notification');
      }
    } catch (error) {
      toast.error('Không thể gửi thông báo');
    }
  };

  const handleBulkSend = async () => {
    try {
      const pendingNotifications = notifications.filter(n => n.status === 'pending');

      if (pendingNotifications.length === 0) {
        toast.error('Không có thông báo nào đang chờ gửi');
        return;
      }

      // Send bulk notifications via real API
      const apiUrl = process.env.REACT_APP_API_URL || window.location.origin;
      const token = localStorage.getItem('authToken');

      const response = await fetch(`${apiUrl}/api/v1/warranty/notifications/bulk-send`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-Tenant-ID': 'default',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          notification_ids: pendingNotifications.map(n => n.id)
        })
      });

      if (!response.ok) {
        throw new Error('Failed to send bulk notifications');
      }

      const data = await response.json();

      if (data.success) {
        const updatedNotifications = notifications.map(n =>
          n.status === 'pending'
            ? { ...n, status: 'sent' as const, sent_date: new Date().toISOString() }
            : n
        );
        setNotifications(updatedNotifications);
        toast.success(`Đã gửi ${pendingNotifications.length} thông báo`);
      } else {
        throw new Error(data.error || 'Failed to send bulk notifications');
      }
    } catch (error) {
      toast.error('Không thể gửi hàng loạt thông báo');
    }
  };

  const filteredNotifications = notifications.filter(notification => {
    const matchesSearch = 
      notification.customer_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      notification.product_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      notification.warranty_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      notification.product_serial.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || notification.status === statusFilter;
    const matchesType = typeFilter === 'all' || notification.notification_type === typeFilter;
    
    return matchesSearch && matchesStatus && matchesType;
  });

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-3 bg-red-100 rounded-xl">
            <Bell className="w-8 h-8 text-red-600 />">
          </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Thông báo bảo hành
            </h1>
            <p className="text-gray-600">
              Hệ thống thông báo tự động qua SMS, Zalo, Email khi bảo hành sắp hết hạn
            </p>
          </div>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => setShowRuleModal(true)}>
            <Settings className="w-4 h-4 mr-2" />
            Quy tắc
          </Button>
          <Button variant="outline" onClick={() => setShowTemplateModal(true)}>
            <FileText className="w-4 h-4 mr-2" />
            Mẫu tin
          </Button>
          <Button onClick={handleBulkSend} className="bg-red-600 hover:bg-red-700">
            <Send className="w-4 h-4 mr-2" />
            Gửi hàng loạt
          </Button>
        </div>
      </div>

      {/* Tabs */}
      <div className="flex border-b border-gray-200 mb-6">
        {[
          { id: 'notifications', label: 'Thông báo', icon: Bell, count: notifications.length },
          { id: 'templates', label: 'Mẫu tin', icon: FileText, count: templates.length },
          { id: 'rules', label: 'Quy tắc', icon: Settings, count: rules.length },
          { id: 'analytics', label: 'Thống kê', icon: TrendingUp, count: 0 }
        ].map(tab => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`flex items-center gap-2 px-6 py-3 font-medium text-sm border-b-2 transition-colors ${
              activeTab === tab.id
                ? 'border-red-500 text-red-600 
                : 'border-transparent text-gray-500 hover:text-gray-700  
            }`}
          >
            <tab.icon className="w-4 h-4" />
            {tab.label}
            {tab.count > 0 && (
              <span className="px-2 py-1 bg-gray-200 text-xs rounded-full">
                {tab.count}
              </span>
            )}
          </button>
        ))}
      </div>

      {activeTab === 'notifications' && (
        <>
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            {[
              { 
                label: 'Tổng thông báo', 
                value: notifications.length, 
                color: 'bg-blue-500', 
                icon: Bell,
                detail: 'Tất cả thông báo'
              },
              { 
                label: 'Chờ gửi', 
                value: notifications.filter(n => n.status === 'pending').length, 
                color: 'bg-yellow-500', 
                icon: Clock,
                detail: 'Cần xử lý ngay'
              },
              { 
                label: 'Đã gửi', 
                value: notifications.filter(n => n.status === 'sent').length, 
                color: 'bg-green-500', 
                icon: CheckCircle,
                detail: 'Gửi thành công'
              },
              { 
                label: 'Thất bại', 
                value: notifications.filter(n => n.status === 'failed').length, 
                color: 'bg-red-500', 
                icon: XCircle,
                detail: 'Cần gửi lại'
              }
            ].map((stat, index) => (
              <motion.div
                key={stat.label}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <Card className="hover:shadow-lg transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <div className={`p-2 ${stat.color} rounded-lg`}>
                        <stat.icon className="w-5 h-5 text-white" />
                      </div>
                      <div className="text-right">
                        <p className="text-2xl font-bold text-gray-900">
                      </div>
                    </div>
                    <p className="text-sm font-medium text-gray-600 mb-1">{stat.label}</p>
                    <p className="text-xs text-gray-500">
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>

          {/* Filters */}
          <Card className="mb-6">
            <CardContent className="p-4">
              <div className="flex flex-col lg:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <input
                      type="text"
                      placeholder="Tìm kiếm thông báo, khách hàng, sản phẩm..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent ">
                    />
                  </div>
                </div>
                <div className="flex gap-2">
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 ">
                  >
                    <option value="all">Tất cả trạng thái</option>
                    <option value="pending">Chờ gửi</option>
                    <option value="scheduled">Đã lên lịch</option>
                    <option value="sent">Đã gửi</option>
                    <option value="delivered">Đã nhận</option>
                    <option value="failed">Thất bại</option>
                  </select>
                  <select
                    value={typeFilter}
                    onChange={(e) => setTypeFilter(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 ">
                  >
                    <option value="all">Tất cả loại</option>
                    <option value="email">Email</option>
                    <option value="sms">SMS</option>
                    <option value="zalo">Zalo</option>
                    <option value="push">Push</option>
                  </select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Notifications List */}
          <Card>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Thông báo
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Khách hàng
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Sản phẩm
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Loại
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Mức độ
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Trạng thái
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Hết hạn
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Thao tác
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredNotifications.map((notification) => {
                      const TypeIcon = getTypeIcon(notification.notification_type);
                      return (
                        <tr key={notification.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div>
                              <div className="text-sm font-medium text-gray-900">
                                {notification.template_name}
                              </div>
                              <div className="text-sm text-gray-500">
                                {notification.warranty_id}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div>
                              <div className="text-sm font-medium text-gray-900">
                                {notification.customer_name}
                              </div>
                              <div className="text-sm text-gray-500">
                                {notification.customer_phone}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div>
                              <div className="text-sm font-medium text-gray-900">
                                {notification.product_name}
                              </div>
                              <div className="text-sm text-gray-500">
                                {notification.product_serial}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center gap-2">
                              <TypeIcon className="w-4 h-4 text-gray-400" />
                              <span className="text-sm font-medium text-gray-900 capitalize">
                                {notification.notification_type}
                              </span>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPriorityColor(notification.priority)}`}>
                              {notification.priority === 'low' ? 'Thấp' :
                               notification.priority === 'medium' ? 'Trung bình' :
                               notification.priority === 'high' ? 'Cao' : 'Khẩn cấp'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(notification.status)}`}>
                              {notification.status === 'pending' ? 'Chờ gửi' :
                               notification.status === 'scheduled' ? 'Đã lên lịch' :
                               notification.status === 'sent' ? 'Đã gửi' :
                               notification.status === 'delivered' ? 'Đã nhận' : 'Thất bại'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm">
                              <div className="text-gray-900">
                                {notification.days_until_expiry} ngày
                              </div>
                              <div className="text-gray-500">
                                {formatDate(notification.warranty_end_date)}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div className="flex items-center gap-1">
                              {notification.status === 'pending' && (
                                <Button size="sm" variant="ghost" onClick={() => handleSendNotification(notification.id)}>
                                  <Send className="w-4 h-4" />
                                </Button>
                              )}
                              <Button size="sm" variant="ghost" onClick={() => setSelectedNotification(notification)}>
                                <Eye className="w-4 h-4" />
                              </Button>
                              <Button size="sm" variant="ghost">
                                <Edit className="w-4 h-4" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </>
      )}

      {activeTab === 'templates' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {templates.map((template) => {
            const TypeIcon = getTypeIcon(template.type);
            return (
              <Card key={template.id} className="hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <div className={`p-2 ${template.type === 'email' ? 'bg-blue-100  :
                        template.type === 'sms' ? 'bg-green-100  :
                        template.type === 'zalo' ? 'bg-purple-100  :
                        'bg-orange-100  rounded-lg`}>
                        <TypeIcon className={`w-5 h-5 ${template.type === 'email' ? 'text-blue-600  :
                          template.type === 'sms' ? 'text-green-600  :
                          template.type === 'zalo' ? 'text-purple-600  :
                          'text-orange-600  />
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-900">
                          {template.name}
                        </h3>
                        <p className="text-sm text-gray-500 capitalize">
                          {template.type}
                        </p>
                      </div>
                    </div>
                    <span className={`px-2 py-1 text-xs rounded-full ${template.is_active ? 'bg-green-100 text-green-800   : 'bg-gray-100 text-gray-800  
                      {template.is_active ? 'Hoạt động' : 'Tạm dừng'}
                    </span>
                  </div>

                  {template.subject && (
                    <div className="mb-3">
                      <p className="text-sm font-medium text-gray-700 mb-1">Tiêu đề:</p>
                      <p className="text-sm text-gray-600 truncate">{template.subject}</p>
                    </div>
                  )}

                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-1">Nội dung:</p>
                    <p className="text-sm text-gray-600 line-clamp-3">
                      {template.content}
                    </p>
                  </div>

                  <div className="mb-4">
                    <p className="text-sm font-medium text-gray-700 mb-2">Biến:</p>
                    <div className="flex flex-wrap gap-1">
                      {template.variables.map((variable) => (
                        <span key={variable} className="px-2 py-1 bg-gray-100  text-gray-700 text-xs rounded">
                          {`{{${variable}}}`}
                        </span>
                      ))}
                    </div>
                  </div>

                  <div className="flex justify-between items-center pt-3 border-t border-gray-200">
                    <div className="text-sm text-gray-500">
                      Đã dùng: {template.usage_count} lần
                    </div>
                    <div className="flex gap-1">
                      <Button size="sm" variant="ghost">
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button size="sm" variant="ghost">
                        <Edit className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {activeTab === 'rules' && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {rules.map((rule) => (
            <Card key={rule.id} className="hover:shadow-lg transition-shadow">
              <CardContent className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">
                      {rule.name}
                    </h3>
                    <div className="flex items-center gap-2">
                      <span className={`px-2 py-1 text-xs rounded-full ${rule.is_active ? 'bg-green-100 text-green-800   : 'bg-gray-100 text-gray-800  
                        {rule.is_active ? 'Hoạt động' : 'Tạm dừng'}
                      </span>
                    </div>
                  </div>
                  <div className="flex gap-1">
                    <Button size="sm" variant="ghost">
                      {rule.is_active ? <PauseCircle className="w-4 h-4" /> : <PlayCircle className="w-4 h-4" />}
                    </Button>
                    <Button size="sm" variant="ghost">
                      <Edit className="w-4 h-4" />
                    </Button>
                  </div>
                </div>

                <div className="space-y-3">
                  <div>
                    <p className="text-sm font-medium text-gray-700 mb-1">Nhắc nhở trước:</p>
                    <div className="flex flex-wrap gap-1">
                      {rule.trigger_days.map((day) => (
                        <span key={day} className="px-2 py-1 bg-blue-100  text-blue-800 text-xs rounded">
                          {day} ngày
                        </span>
                      ))}
                    </div>
                  </div>

                  <div>
                    <p className="text-sm font-medium text-gray-700 mb-1">Kênh thông báo:</p>
                    <div className="flex flex-wrap gap-1">
                      {rule.notification_types.map((type) => {
                        const TypeIcon = getTypeIcon(type);
                        return (
                          <div key={type} className="flex items-center gap-1 px-2 py-1 bg-gray-100  text-gray-700 text-xs rounded">
                            <TypeIcon className="w-3 h-3" />
                            <span className="capitalize">{type}</span>
                          </div>
                        );
                      })}
                    </div>
                  </div>

                  {rule.conditions.warranty_type && (
                    <div>
                      <p className="text-sm font-medium text-gray-700 mb-1">Loại bảo hành:</p>
                      <div className="flex flex-wrap gap-1">
                        {rule.conditions.warranty_type.map((type) => (
                          <span key={type} className="px-2 py-1 bg-green-100  text-green-800 text-xs rounded">
                            {type}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {rule.conditions.customer_tier && (
                    <div>
                      <p className="text-sm font-medium text-gray-700 mb-1">Hạng khách hàng:</p>
                      <div className="flex flex-wrap gap-1">
                        {rule.conditions.customer_tier.map((tier) => (
                          <span key={tier} className="px-2 py-1 bg-purple-100  text-purple-800 text-xs rounded">
                            {tier}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="pt-3 border-t border-gray-200 mt-4">
                  <p className="text-sm text-gray-500">
                    Tạo: {formatDate(rule.created_date)}
                  </p>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {activeTab === 'analytics' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* Analytics content would go here */}
          <Card>
            <CardContent className="p-6 text-center">
              <TrendingUp className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Thống kê chi tiết
              </h3>
              <p className="text-gray-600">
                Sẽ được phát triển trong phiên bản tiếp theo
              </p>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default WarrantyNotifications;
