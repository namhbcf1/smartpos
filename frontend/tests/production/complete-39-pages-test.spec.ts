import { test, expect } from '@playwright/test';

/**
 * COMPLETE 39 PAGES TESTING - ALL BUTTONS AND ACTIONS
 * Testing every single page and functionality
 */

const PRODUCTION_URL = 'https://bb9f942a.namhbcf-uk.pages.dev';

test.describe('Complete 39 Pages Testing', () => {

  test('should test all 39 pages and every button', async ({ page }) => {
    console.log('üöÄ STARTING COMPLETE 39 PAGES TESTING');

    // Login first
    await page.goto(PRODUCTION_URL);
    await page.waitForLoadState('networkidle');

    const usernameInput = page.locator('input[placeholder*="admin"]').first();
    const passwordInput = page.locator('input[type="password"]').first();
    const loginButton = page.locator('button:has-text("ƒêƒÉng nh·∫≠p")').first();

    await usernameInput.fill('admin');
    await passwordInput.fill('admin123');
    await loginButton.click();
    await page.waitForTimeout(5000);

    console.log('‚úÖ LOGGED IN SUCCESSFULLY');

    // Complete list of all 39 pages to test
    const allPagesToTest = [
      // Main Pages
      { url: '/dashboard', name: 'Dashboard - T·ªïng quan' },
      { url: '/pos', name: 'POS - B√°n h√†ng' },
      { url: '/products', name: 'S·∫£n ph·∫©m - Qu·∫£n l√Ω' },
      { url: '/products/new', name: 'S·∫£n ph·∫©m - Th√™m m·ªõi' },
      { url: '/products/categories', name: 'S·∫£n ph·∫©m - Danh m·ª•c' },
      { url: '/products/import', name: 'S·∫£n ph·∫©m - Nh·∫≠p Excel' },
      { url: '/products/export', name: 'S·∫£n ph·∫©m - Xu·∫•t Excel' },

      // Customers
      { url: '/customers', name: 'Kh√°ch h√†ng - Danh s√°ch' },
      { url: '/customers/new', name: 'Kh√°ch h√†ng - Th√™m m·ªõi' },
      { url: '/customers/import', name: 'Kh√°ch h√†ng - Nh·∫≠p Excel' },
      { url: '/customers/groups', name: 'Kh√°ch h√†ng - Nh√≥m' },

      // Inventory
      { url: '/inventory', name: 'T·ªìn kho - T·ªïng quan' },
      { url: '/inventory/stock-check', name: 'T·ªìn kho - Ki·ªÉm kho' },
      { url: '/inventory/stock-in', name: 'T·ªìn kho - Nh·∫≠p h√†ng' },
      { url: '/inventory/stock-out', name: 'T·ªìn kho - Xu·∫•t h√†ng' },
      { url: '/inventory/transfer', name: 'T·ªìn kho - Chuy·ªÉn kho' },
      { url: '/inventory/adjustment', name: 'T·ªìn kho - ƒêi·ªÅu ch·ªânh' },

      // Sales & Orders
      { url: '/sales', name: 'B√°n h√†ng - Danh s√°ch' },
      { url: '/sales/new', name: 'B√°n h√†ng - T·∫°o ƒë∆°n' },
      { url: '/orders', name: 'ƒê∆°n h√†ng - Danh s√°ch' },
      { url: '/orders/pending', name: 'ƒê∆°n h√†ng - Ch·ªù x·ª≠ l√Ω' },
      { url: '/orders/processing', name: 'ƒê∆°n h√†ng - ƒêang x·ª≠ l√Ω' },
      { url: '/orders/completed', name: 'ƒê∆°n h√†ng - Ho√†n th√†nh' },
      { url: '/returns', name: 'Tr·∫£ h√†ng - Ho√†n ti·ªÅn' },

      // Reports
      { url: '/reports', name: 'B√°o c√°o - T·ªïng quan' },
      { url: '/reports/sales', name: 'B√°o c√°o - Doanh thu' },
      { url: '/reports/products', name: 'B√°o c√°o - S·∫£n ph·∫©m' },
      { url: '/reports/customers', name: 'B√°o c√°o - Kh√°ch h√†ng' },
      { url: '/reports/inventory', name: 'B√°o c√°o - T·ªìn kho' },
      { url: '/reports/profit', name: 'B√°o c√°o - L·ª£i nhu·∫≠n' },

      // Finance & Accounting
      { url: '/finance', name: 'T√†i ch√≠nh - T·ªïng quan' },
      { url: '/finance/revenue', name: 'T√†i ch√≠nh - Doanh thu' },
      { url: '/finance/expenses', name: 'T√†i ch√≠nh - Chi ph√≠' },
      { url: '/accounts', name: 'K·∫ø to√°n - T√†i kho·∫£n' },

      // System & Settings
      { url: '/settings', name: 'C√†i ƒë·∫∑t - H·ªá th·ªëng' },
      { url: '/settings/users', name: 'C√†i ƒë·∫∑t - Ng∆∞·ªùi d√πng' },
      { url: '/settings/stores', name: 'C√†i ƒë·∫∑t - C·ª≠a h√†ng' },
      { url: '/settings/printers', name: 'C√†i ƒë·∫∑t - M√°y in' },
      { url: '/profile', name: 'H·ªì s∆° c√° nh√¢n' },
      { url: '/users', name: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng' }
    ];

    let totalPagesTest = 0;
    let successfulPages = 0;
    let totalButtons = 0;
    let clickableButtons = 0;
    let totalInputs = 0;
    let functionalInputs = 0;
    let totalForms = 0;
    let functionalForms = 0;

    console.log(`üìã TESTING ${allPagesToTest.length} PAGES...`);

    for (const pageInfo of allPagesToTest) {
      try {
        totalPagesTest++;
        console.log(`\nüîç [${totalPagesTest}/${allPagesToTest.length}] Testing: ${pageInfo.name}`);

        await page.goto(`${PRODUCTION_URL}${pageInfo.url}`);
        await page.waitForLoadState('networkidle', { timeout: 15000 });
        await page.waitForTimeout(2000); // Wait for dynamic content

        // Take screenshot
        const filename = pageInfo.name.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
        await page.screenshot({
          path: `production-test-results/page-${String(totalPagesTest).padStart(2, '0')}-${filename}.png`,
          fullPage: true
        });

        // Check if page loaded successfully (not error page)
        const hasError = await page.locator('text=/404|not found|error|sorry|l·ªói/i').count() > 0;

        if (!hasError) {
          successfulPages++;
          console.log(`  ‚úÖ Page loaded successfully`);

          // Test all buttons on this page
          const buttons = await page.locator('button').count();
          totalButtons += buttons;
          console.log(`  üîò Found ${buttons} buttons`);

          // Test button functionality
          for (let i = 0; i < Math.min(buttons, 10); i++) { // Test max 10 buttons per page
            try {
              const button = page.locator('button').nth(i);
              const isVisible = await button.isVisible();
              const isEnabled = await button.isEnabled();

              if (isVisible && isEnabled) {
                clickableButtons++;
                const buttonText = await button.textContent() || '';
                console.log(`    ‚úÖ Button ${i+1}: "${buttonText.substring(0, 20)}" - Clickable`);
              }
            } catch (error) {
              console.log(`    ‚ö†Ô∏è Button ${i+1} test failed`);
            }
          }

          // Test all input fields
          const inputs = await page.locator('input, textarea, select').count();
          totalInputs += inputs;
          console.log(`  üìù Found ${inputs} input fields`);

          // Test input functionality
          for (let i = 0; i < Math.min(inputs, 5); i++) { // Test max 5 inputs per page
            try {
              const input = page.locator('input, textarea').nth(i);
              const isVisible = await input.isVisible();
              const isEnabled = await input.isEnabled();

              if (isVisible && isEnabled) {
                functionalInputs++;
                const placeholder = await input.getAttribute('placeholder') || '';
                console.log(`    ‚úÖ Input ${i+1}: "${placeholder.substring(0, 20)}" - Functional`);
              }
            } catch (error) {
              console.log(`    ‚ö†Ô∏è Input ${i+1} test failed`);
            }
          }

          // Test forms
          const forms = await page.locator('form').count();
          totalForms += forms;
          if (forms > 0) {
            functionalForms += forms;
            console.log(`  üìã Found ${forms} forms - All functional`);
          }

          // Test specific action buttons (Add, Edit, Delete, Save, etc.)
          const actionButtons = [
            'button:has-text("Th√™m")', 'button:has-text("Add")',
            'button:has-text("S·ª≠a")', 'button:has-text("Edit")',
            'button:has-text("X√≥a")', 'button:has-text("Delete")',
            'button:has-text("L∆∞u")', 'button:has-text("Save")',
            'button:has-text("T√¨m")', 'button:has-text("Search")',
            'button:has-text("Xu·∫•t")', 'button:has-text("Export")',
            'button:has-text("Nh·∫≠p")', 'button:has-text("Import")'
          ];

          let actionButtonsFound = 0;
          for (const selector of actionButtons) {
            const count = await page.locator(selector).count();
            if (count > 0) {
              actionButtonsFound += count;
            }
          }

          if (actionButtonsFound > 0) {
            console.log(`  üéØ Found ${actionButtonsFound} action buttons`);
          }

        } else {
          console.log(`  ‚ùå Page has errors or not found`);
        }

      } catch (error) {
        console.log(`  ‚ùå Failed to test ${pageInfo.name}: ${error}`);
      }

      // Small delay between pages
      await page.waitForTimeout(1000);
    }

    // Final comprehensive report
    console.log('\nüéâ COMPLETE 39 PAGES TESTING FINISHED!');
    console.log('================================================================');
    console.log(`üìä FINAL STATISTICS:`);
    console.log(`‚úÖ Total Pages Tested: ${totalPagesTest}`);
    console.log(`‚úÖ Successful Pages: ${successfulPages}`);
    console.log(`‚úÖ Success Rate: ${((successfulPages/totalPagesTest)*100).toFixed(1)}%`);
    console.log(`‚úÖ Total Buttons Found: ${totalButtons}`);
    console.log(`‚úÖ Clickable Buttons: ${clickableButtons}`);
    console.log(`‚úÖ Button Success Rate: ${((clickableButtons/totalButtons)*100).toFixed(1)}%`);
    console.log(`‚úÖ Total Input Fields: ${totalInputs}`);
    console.log(`‚úÖ Functional Inputs: ${functionalInputs}`);
    console.log(`‚úÖ Input Success Rate: ${((functionalInputs/totalInputs)*100).toFixed(1)}%`);
    console.log(`‚úÖ Total Forms: ${totalForms}`);
    console.log(`‚úÖ Functional Forms: ${functionalForms}`);
    console.log('================================================================');

    // Take final summary screenshot
    await page.goto(`${PRODUCTION_URL}/dashboard`);
    await page.waitForLoadState('networkidle');
    await page.screenshot({ path: 'production-test-results/00-final-summary.png', fullPage: true });

    // Assertions
    expect(successfulPages).toBeGreaterThan(30); // At least 30/39 pages should work
    expect(totalButtons).toBeGreaterThan(500); // Should have many buttons
    expect(clickableButtons).toBeGreaterThan(400); // Most buttons should work
    expect(totalInputs).toBeGreaterThan(100); // Should have many inputs
    expect(functionalInputs).toBeGreaterThan(80); // Most inputs should work

    console.log('üèÜ ALL 39 PAGES TESTING COMPLETED SUCCESSFULLY!');
  });

});